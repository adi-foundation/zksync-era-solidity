// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0;

contract ERC20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;
  uint256 private _totalSupply;

  function decimals() public view returns (uint8) {
    return 18;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc12 = loc({{.*}}:19:21)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @ERC20_42 {
// CHECK-NEXT:     sol.state_var @_balances : !sol.mapping<i256, i256> loc(#loc2)
// CHECK-NEXT:     sol.state_var @_allowances : !sol.mapping<i256, !sol.mapping<i256, i256>> loc(#loc3)
// CHECK-NEXT:     sol.state_var @_totalSupply : i256 loc(#loc4)
// CHECK-NEXT:     sol.func @decimals_21() -> i8 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %c18_i8 = arith.constant 18 : i8 loc(#loc6)
// CHECK-NEXT:       sol.return %c18_i8 : i8 loc(#loc7)
// CHECK-NEXT:     } loc(#loc5)
// CHECK-NEXT:     sol.func @totalSupply_29() -> i256 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %0 = sol.addr_of @_totalSupply : !sol.ptr<i256, Storage> loc(#loc4)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<i256, Storage>, i256 loc(#loc9)
// CHECK-NEXT:       sol.return %1 : i256 loc(#loc10)
// CHECK-NEXT:     } loc(#loc8)
// CHECK-NEXT:     sol.func @balanceOf_41(%arg0: i256 loc({{.*}}:19:21)) -> i256 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<i256, Stack> loc(#loc12)
// CHECK-NEXT:       sol.store %arg0 : i256, %0 : !sol.ptr<i256, Stack> loc(#loc12)
// CHECK-NEXT:       %1 = sol.addr_of @_balances : !sol.mapping<i256, i256> loc(#loc2)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<i256, Stack>, i256 loc(#loc13)
// CHECK-NEXT:       %3 = sol.map %1, %2 : !sol.mapping<i256, i256>, !sol.ptr<i256, Storage> loc(#loc14)
// CHECK-NEXT:       %4 = sol.load %3 : !sol.ptr<i256, Storage>, i256 loc(#loc14)
// CHECK-NEXT:       sol.return %4 : i256 loc(#loc15)
// CHECK-NEXT:     } loc(#loc11)
// CHECK-NEXT:   } {interface_fns = [{selector = "18160ddd", sym = @totalSupply_29, type = () -> i256}, {selector = "313ce567", sym = @decimals_21, type = () -> i8}, {selector = "70a08231", sym = @balanceOf_41, type = (i256) -> i256}], kind = #sol<ContractKind Contract>} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:6:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc5 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc6 = loc({{.*}}:12:11)
// CHECK-NEXT: #loc7 = loc({{.*}}:12:4)
// CHECK-NEXT: #loc8 = loc({{.*}}:15:2)
// CHECK-NEXT: #loc9 = loc({{.*}}:16:11)
// CHECK-NEXT: #loc10 = loc({{.*}}:16:4)
// CHECK-NEXT: #loc11 = loc({{.*}}:19:2)
// CHECK-NEXT: #loc13 = loc({{.*}}:20:21)
// CHECK-NEXT: #loc14 = loc({{.*}}:20:11)
// CHECK-NEXT: #loc15 = loc({{.*}}:20:4)
// CHECK-EMPTY:
