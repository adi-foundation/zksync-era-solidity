// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

contract C {
  uint m;

  function ret() private pure returns (uint) { return 42; }
  function no_ret(uint a) private { m = a; }
  function main() public returns (uint) { no_ret(42); return ret(); }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc7 = loc({{.*}}:6:18)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_34 {
// CHECK-NEXT:     sol.state_var @m : i256 loc(#loc2)
// CHECK-NEXT:     sol.func @ret_10() -> i256 attributes {state_mutability = #sol<StateMutability Pure>} {
// CHECK-NEXT:       %c42_i8 = arith.constant 42 : i8 loc(#loc4)
// CHECK-NEXT:       %0 = arith.extui %c42_i8 : i8 to i256 loc(#loc4)
// CHECK-NEXT:       sol.return %0 : i256 loc(#loc5)
// CHECK-NEXT:     } loc(#loc3)
// CHECK-NEXT:     sol.func @no_ret_20(%arg0: i256 loc({{.*}}:6:18)) attributes {state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<i256, Stack> loc(#loc7)
// CHECK-NEXT:       sol.store %arg0, %0 : i256, !sol.ptr<i256, Stack> loc(#loc7)
// CHECK-NEXT:       %1 = sol.addr_of @m : !sol.ptr<i256, Storage> loc(#loc2)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<i256, Stack>, i256 loc(#loc8)
// CHECK-NEXT:       sol.store %2, %1 : i256, !sol.ptr<i256, Storage> loc(#loc9)
// CHECK-NEXT:       sol.return loc(#loc6)
// CHECK-NEXT:     } loc(#loc6)
// CHECK-NEXT:     sol.func @main_33() -> i256 attributes {state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:       %c42_i8 = arith.constant 42 : i8 loc(#loc11)
// CHECK-NEXT:       %0 = arith.extui %c42_i8 : i8 to i256 loc(#loc11)
// CHECK-NEXT:       sol.call @no_ret_20(%0) : (i256) -> () loc(#loc12)
// CHECK-NEXT:       %1 = sol.call @ret_10() : () -> i256 loc(#loc13)
// CHECK-NEXT:       sol.return %1 : i256 loc(#loc14)
// CHECK-NEXT:     } loc(#loc10)
// CHECK-NEXT:   } {interface_fns = [{selector = "dffeadd0", sym = @main_33, type = () -> i256}], kind = #sol<ContractKind Contract>} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:2:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:3:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:5:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:5:54)
// CHECK-NEXT: #loc5 = loc({{.*}}:5:47)
// CHECK-NEXT: #loc6 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc8 = loc({{.*}}:6:40)
// CHECK-NEXT: #loc9 = loc({{.*}}:6:36)
// CHECK-NEXT: #loc10 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc11 = loc({{.*}}:7:49)
// CHECK-NEXT: #loc12 = loc({{.*}}:7:42)
// CHECK-NEXT: #loc13 = loc({{.*}}:7:61)
// CHECK-NEXT: #loc14 = loc({{.*}}:7:54)
// CHECK-EMPTY:
