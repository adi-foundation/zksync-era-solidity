// RUN: sol-opt -convert-sol-to-std=target=eravm %s | FileCheck %s

module {
  sol.func @malloc() {
    %mem = sol.malloc : !sol.array<3 x i256, Memory>
    %zero = arith.constant 0 : i256
    %ld = sol.load %mem[%zero : i256] : !sol.array<3 x i256, Memory>, i256
    sol.return
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() : !llvm.ptr<3>
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {alignment = 32 : i64} : i256
// CHECK-NEXT:   func.func @malloc() attributes {llvm.linkage = #llvm.linkage<private>} {
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256
// CHECK-NEXT:     %2 = arith.addi %1, %c96_i256 : i256
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256
// CHECK-NEXT:     %3 = llvm.inttoptr %2 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     llvm.store %c64_i256_0, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1>
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256
// CHECK-NEXT:     %c96_i256_1 = arith.constant 96 : i256
// CHECK-NEXT:     %4 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256>
// CHECK-NEXT:     %5 = llvm.load %4 {alignment = 32 : i64} : !llvm.ptr<i256>
// CHECK-NEXT:     %6 = llvm.inttoptr %1 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %7 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %8 = llvm.load %7 {alignment = 32 : i64} : !llvm.ptr<ptr<3>>
// CHECK-NEXT:     %9 = llvm.getelementptr %8[%5] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8
// CHECK-NEXT:     %10 = llvm.mlir.constant(false) : i1
// CHECK-NEXT:     "llvm.intr.memcpy"(%6, %9, %c96_i256_1, %10) : (!llvm.ptr<1>, !llvm.ptr<3>, i256, i1) -> ()
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256
// CHECK-NEXT:     %11 = arith.muli %c0_i256_2, %c32_i256 : i256
// CHECK-NEXT:     %12 = arith.addi %1, %11 : i256
// CHECK-NEXT:     %13 = llvm.inttoptr %12 : i256 to !llvm.ptr<1>
// CHECK-NEXT:     %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<1> -> i256
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-EMPTY:
