// RUN: solc --yul --yul-dialect=evm --mlir-action=print-llvm-ir --mlir-target=eravm %s | FileCheck %s
// RUN: solc --yul --yul-dialect=evm --mlir-action=print-asm --mlir-target=eravm %s | FileCheck --check-prefix=ASM %s

object "Test" {
  code {
    mstore(64, memoryguard(0x80))
    if callvalue() {
      revert(0, 0)
    }
    let freePtr := mload(64)
    codecopy(freePtr, dataoffset("Test_deployed"), datasize("Test_deployed"))
    return(freePtr, datasize("Test_deployed"))
  }
  object "Test_deployed" {
    code {
      mstore(64, memoryguard(0x80))
      if iszero(lt(calldatasize(), 4)) {
        let selector := shr(224, calldataload(0))
        switch selector
        case 0x26121ff0 {
          if callvalue() {
            revert(0, 0)
          }
          if slt(sub(calldatasize(), 4), 0)
          {
            revert(0, 0)
          }
          let ret := f()
          let memPos := mload(64)
          let memEnd := add(memPos, 32)
          mstore(memPos, ret)
          return(memPos, sub(memEnd, memPos))
        }
        default {}
      }
      revert(0, 0)

      function f() -> r {
        r := 42
      }
    }
  }
}
// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: ; ModuleID = 'LLVMDialectModule'
// CHECK-NEXT: source_filename = "LLVMDialectModule"
// CHECK-EMPTY:
// CHECK-NEXT: @ptr_active = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_return_data = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_calldata = private global ptr addrspace(3) undef
// CHECK-NEXT: @extra_abi_data = private global [10 x i256] zeroinitializer, align 32
// CHECK-NEXT: @call_flags = private global i256 0, align 32
// CHECK-NEXT: @returndatasize = private global i256 0, align 32
// CHECK-NEXT: @calldatasize = private global i256 0, align 32
// CHECK-NEXT: @memory_pointer = private global i256 0, align 32
// CHECK-EMPTY:
// CHECK-NEXT: declare ptr @malloc(i64)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @free(ptr)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @__return(i256, i256, i256)
// CHECK-EMPTY:
// CHECK-NEXT: define private void @.unreachable() !dbg !3 {
// CHECK-NEXT:   unreachable, !dbg !7
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: declare void @__revert(i256, i256, i256)
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__deploy() !dbg !10 {
// CHECK-NEXT:   store i256 128, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1, !dbg !11
// CHECK-NEXT:   %1 = call i256 @llvm.eravm.getu128(), !dbg !13
// CHECK-NEXT:   %2 = icmp ne i256 %1, 0, !dbg !13
// CHECK-NEXT:   br i1 %2, label %3, label %4, !dbg !14
// CHECK-EMPTY:
// CHECK-NEXT: 3:                                                ; preds = %0
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 2), !dbg !15
// CHECK-NEXT:   call void @.unreachable(), !dbg !15
// CHECK-NEXT:   br label %4, !dbg !14
// CHECK-EMPTY:
// CHECK-NEXT: 4:                                                ; preds = %3, %0
// CHECK-NEXT:   %5 = alloca i256, i256 1, align 32, !dbg !16
// CHECK-NEXT:   %6 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1, !dbg !17
// CHECK-NEXT:   store i256 %6, ptr %5, align 32, !dbg !18
// CHECK-NEXT:   %7 = load i256, ptr %5, align 32, !dbg !19
// CHECK-NEXT:   %8 = inttoptr i256 %7 to ptr addrspace(1), !dbg !20
// CHECK-NEXT:   %9 = load ptr addrspace(3), ptr @ptr_calldata, align 32, !dbg !20
// CHECK-NEXT:   %10 = getelementptr i8, ptr addrspace(3) %9, i256 0, !dbg !20
// CHECK-NEXT:   call void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) %8, ptr addrspace(3) %10, i256 0, i1 false), !dbg !20
// CHECK-NEXT:   %11 = load i256, ptr %5, align 32, !dbg !21
// CHECK-NEXT:   store i256 32, ptr addrspace(2) inttoptr (i256 256 to ptr addrspace(2)), align 1, !dbg !22
// CHECK-NEXT:   store i256 0, ptr addrspace(2) inttoptr (i256 288 to ptr addrspace(2)), align 1, !dbg !22
// CHECK-NEXT:   call void @__return(i256 256, i256 64, i256 2), !dbg !22
// CHECK-NEXT:   call void @.unreachable(), !dbg !22
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__runtime() !dbg !23 {
// CHECK-NEXT:   store i256 128, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1, !dbg !24
// CHECK-NEXT:   %1 = load i256, ptr @calldatasize, align 32, !dbg !26
// CHECK-NEXT:   %2 = icmp ult i256 %1, 4, !dbg !27
// CHECK-NEXT:   %3 = zext i1 %2 to i256, !dbg !27
// CHECK-NEXT:   %4 = icmp eq i256 %3, 0, !dbg !28
// CHECK-NEXT:   br i1 %4, label %5, label %38, !dbg !29
// CHECK-EMPTY:
// CHECK-NEXT: 5:                                                ; preds = %0
// CHECK-NEXT:   %6 = alloca i256, i256 1, align 32, !dbg !30
// CHECK-NEXT:   %7 = load ptr addrspace(3), ptr @ptr_calldata, align 32, !dbg !31
// CHECK-NEXT:   %8 = getelementptr i8, ptr addrspace(3) %7, i256 0, !dbg !31
// CHECK-NEXT:   %9 = load i256, ptr addrspace(3) %8, align 1, !dbg !31
// CHECK-NEXT:   %10 = lshr i256 %9, 224, !dbg !32
// CHECK-NEXT:   store i256 %10, ptr %6, align 32, !dbg !33
// CHECK-NEXT:   %11 = load i256, ptr %6, align 32, !dbg !34
// CHECK-NEXT:   switch i256 %11, label %36 [
// CHECK-NEXT:     i256 638722032, label %12
// CHECK-NEXT:   ], !dbg !35
// CHECK-EMPTY:
// CHECK-NEXT: 12:                                               ; preds = %5
// CHECK-NEXT:   %13 = call i256 @llvm.eravm.getu128(), !dbg !36
// CHECK-NEXT:   %14 = icmp ne i256 %13, 0, !dbg !36
// CHECK-NEXT:   br i1 %14, label %15, label %16, !dbg !37
// CHECK-EMPTY:
// CHECK-NEXT: 15:                                               ; preds = %12
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0), !dbg !38
// CHECK-NEXT:   call void @.unreachable(), !dbg !38
// CHECK-NEXT:   br label %16, !dbg !37
// CHECK-EMPTY:
// CHECK-NEXT: 16:                                               ; preds = %15, %12
// CHECK-NEXT:   %17 = load i256, ptr @calldatasize, align 32, !dbg !39
// CHECK-NEXT:   %18 = sub i256 %17, 4, !dbg !40
// CHECK-NEXT:   %19 = icmp slt i256 %18, 0, !dbg !41
// CHECK-NEXT:   br i1 %19, label %20, label %21, !dbg !42
// CHECK-EMPTY:
// CHECK-NEXT: 20:                                               ; preds = %16
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0), !dbg !43
// CHECK-NEXT:   call void @.unreachable(), !dbg !43
// CHECK-NEXT:   br label %21, !dbg !42
// CHECK-EMPTY:
// CHECK-NEXT: 21:                                               ; preds = %20, %16
// CHECK-NEXT:   %22 = alloca i256, i256 1, align 32, !dbg !44
// CHECK-NEXT:   %23 = call i256 @f(), !dbg !45
// CHECK-NEXT:   store i256 %23, ptr %22, align 32, !dbg !46
// CHECK-NEXT:   %24 = alloca i256, i256 1, align 32, !dbg !47
// CHECK-NEXT:   %25 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1, !dbg !48
// CHECK-NEXT:   store i256 %25, ptr %24, align 32, !dbg !49
// CHECK-NEXT:   %26 = alloca i256, i256 1, align 32, !dbg !50
// CHECK-NEXT:   %27 = load i256, ptr %24, align 32, !dbg !51
// CHECK-NEXT:   %28 = add i256 %27, 32, !dbg !52
// CHECK-NEXT:   store i256 %28, ptr %26, align 32, !dbg !53
// CHECK-NEXT:   %29 = load i256, ptr %24, align 32, !dbg !54
// CHECK-NEXT:   %30 = load i256, ptr %22, align 32, !dbg !55
// CHECK-NEXT:   %31 = inttoptr i256 %29 to ptr addrspace(1), !dbg !56
// CHECK-NEXT:   store i256 %30, ptr addrspace(1) %31, align 1, !dbg !56
// CHECK-NEXT:   %32 = load i256, ptr %24, align 32, !dbg !57
// CHECK-NEXT:   %33 = load i256, ptr %26, align 32, !dbg !58
// CHECK-NEXT:   %34 = load i256, ptr %24, align 32, !dbg !59
// CHECK-NEXT:   %35 = sub i256 %33, %34, !dbg !60
// CHECK-NEXT:   call void @__return(i256 %32, i256 %35, i256 0), !dbg !61
// CHECK-NEXT:   call void @.unreachable(), !dbg !61
// CHECK-NEXT:   br label %37, !dbg !35
// CHECK-EMPTY:
// CHECK-NEXT: 36:                                               ; preds = %5
// CHECK-NEXT:   br label %37, !dbg !35
// CHECK-EMPTY:
// CHECK-NEXT: 37:                                               ; preds = %36, %21
// CHECK-NEXT:   br label %38, !dbg !29
// CHECK-EMPTY:
// CHECK-NEXT: 38:                                               ; preds = %37, %0
// CHECK-NEXT:   call void @__revert(i256 0, i256 0, i256 0), !dbg !62
// CHECK-NEXT:   call void @.unreachable(), !dbg !62
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define i256 @f() !dbg !63 {
// CHECK-NEXT:   %1 = alloca i256, i256 1, align 32, !dbg !64
// CHECK-NEXT:   store i256 42, ptr %1, align 32, !dbg !66
// CHECK-NEXT:   %2 = load i256, ptr %1, align 32, !dbg !64
// CHECK-NEXT:   ret i256 %2, !dbg !67
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define i256 @__entry(ptr addrspace(3) %0, i256 %1, i256 %2, i256 %3, i256 %4, i256 %5, i256 %6, i256 %7, i256 %8, i256 %9, i256 %10, i256 %11) {
// CHECK-NEXT:   store i256 0, ptr @memory_pointer, align 32
// CHECK-NEXT:   store i256 0, ptr @calldatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @returndatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @call_flags, align 32
// CHECK-NEXT:   store <10 x i256> zeroinitializer, ptr @extra_abi_data, align 512
// CHECK-NEXT:   store ptr addrspace(3) %0, ptr @ptr_calldata, align 32
// CHECK-NEXT:   store i256 and (i256 lshr (i256 ptrtoint (ptr @ptr_calldata to i256), i256 96), i256 4294967295), ptr @calldatasize, align 32
// CHECK-NEXT:   %13 = load i256, ptr @calldatasize, align 32
// CHECK-NEXT:   %14 = getelementptr i8, ptr addrspace(3) %0, i256 %13
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_return_data, align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_active, align 32
// CHECK-NEXT:   store i256 %1, ptr @call_flags, align 32
// CHECK-NEXT:   store i256 %2, ptr @extra_abi_data, align 32
// CHECK-NEXT:   store i256 %3, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 1), align 32
// CHECK-NEXT:   store i256 %4, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 2), align 32
// CHECK-NEXT:   store i256 %5, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 3), align 32
// CHECK-NEXT:   store i256 %6, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 4), align 32
// CHECK-NEXT:   store i256 %7, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 5), align 32
// CHECK-NEXT:   store i256 %8, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 6), align 32
// CHECK-NEXT:   store i256 %9, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 7), align 32
// CHECK-NEXT:   store i256 %10, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 8), align 32
// CHECK-NEXT:   store i256 %11, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 9), align 32
// CHECK-NEXT:   %15 = and i256 %1, 1
// CHECK-NEXT:   %16 = icmp eq i256 %15, 1
// CHECK-NEXT:   br i1 %16, label %17, label %18
// CHECK-EMPTY:
// CHECK-NEXT: 17:                                               ; preds = %12
// CHECK-NEXT:   call void @__deploy()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 18:                                               ; preds = %12
// CHECK-NEXT:   call void @__runtime()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 19:                                               ; preds = %17, %18
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: nounwind readnone
// CHECK-NEXT: declare i256 @llvm.eravm.getu128() #0
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: argmemonly nocallback nofree nounwind willreturn
// CHECK-NEXT: declare void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(3) noalias nocapture readonly, i256, i1 immarg) #1
// CHECK-EMPTY:
// CHECK-NEXT: attributes #0 = { nounwind readnone }
// CHECK-NEXT: attributes #1 = { argmemonly nocallback nofree nounwind willreturn }
// CHECK-EMPTY:
// CHECK-NEXT: !llvm.dbg.cu = !{!0}
// CHECK-NEXT: !llvm.module.flags = !{!2}
// CHECK-EMPTY:
// CHECK-NEXT: !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "mlir", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
// CHECK-NEXT: !1 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !2 = !{i32 2, !"Debug Info Version", i32 3}
// CHECK-NEXT: !3 = distinct !DISubprogram(name: ".unreachable", linkageName: ".unreachable", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !4 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !5 = !DISubroutineType(types: !6)
// CHECK-NEXT: !6 = !{}
// CHECK-NEXT: !7 = !DILocation(line: 7, column: 6, scope: !8)
// CHECK-NEXT: !8 = !DILexicalBlockFile(scope: !3, file: !9, discriminator: 0)
// CHECK-NEXT: !9 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !10 = distinct !DISubprogram(name: "__deploy", linkageName: "__deploy", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !11 = !DILocation(line: 5, column: 4, scope: !12)
// CHECK-NEXT: !12 = !DILexicalBlockFile(scope: !10, file: !9, discriminator: 0)
// CHECK-NEXT: !13 = !DILocation(line: 6, column: 7, scope: !12)
// CHECK-NEXT: !14 = !DILocation(line: 6, column: 4, scope: !12)
// CHECK-NEXT: !15 = !DILocation(line: 7, column: 6, scope: !12)
// CHECK-NEXT: !16 = !DILocation(line: 9, column: 8, scope: !12)
// CHECK-NEXT: !17 = !DILocation(line: 9, column: 19, scope: !12)
// CHECK-NEXT: !18 = !DILocation(line: 9, column: 4, scope: !12)
// CHECK-NEXT: !19 = !DILocation(line: 10, column: 13, scope: !12)
// CHECK-NEXT: !20 = !DILocation(line: 10, column: 4, scope: !12)
// CHECK-NEXT: !21 = !DILocation(line: 11, column: 11, scope: !12)
// CHECK-NEXT: !22 = !DILocation(line: 11, column: 4, scope: !12)
// CHECK-NEXT: !23 = distinct !DISubprogram(name: "__runtime", linkageName: "__runtime", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !24 = !DILocation(line: 15, column: 6, scope: !25)
// CHECK-NEXT: !25 = !DILexicalBlockFile(scope: !23, file: !9, discriminator: 0)
// CHECK-NEXT: !26 = !DILocation(line: 16, column: 19, scope: !25)
// CHECK-NEXT: !27 = !DILocation(line: 16, column: 16, scope: !25)
// CHECK-NEXT: !28 = !DILocation(line: 16, column: 9, scope: !25)
// CHECK-NEXT: !29 = !DILocation(line: 16, column: 6, scope: !25)
// CHECK-NEXT: !30 = !DILocation(line: 17, column: 12, scope: !25)
// CHECK-NEXT: !31 = !DILocation(line: 17, column: 33, scope: !25)
// CHECK-NEXT: !32 = !DILocation(line: 17, column: 24, scope: !25)
// CHECK-NEXT: !33 = !DILocation(line: 17, column: 8, scope: !25)
// CHECK-NEXT: !34 = !DILocation(line: 18, column: 15, scope: !25)
// CHECK-NEXT: !35 = !DILocation(line: 18, column: 8, scope: !25)
// CHECK-NEXT: !36 = !DILocation(line: 20, column: 13, scope: !25)
// CHECK-NEXT: !37 = !DILocation(line: 20, column: 10, scope: !25)
// CHECK-NEXT: !38 = !DILocation(line: 21, column: 12, scope: !25)
// CHECK-NEXT: !39 = !DILocation(line: 23, column: 21, scope: !25)
// CHECK-NEXT: !40 = !DILocation(line: 23, column: 17, scope: !25)
// CHECK-NEXT: !41 = !DILocation(line: 23, column: 13, scope: !25)
// CHECK-NEXT: !42 = !DILocation(line: 23, column: 10, scope: !25)
// CHECK-NEXT: !43 = !DILocation(line: 25, column: 12, scope: !25)
// CHECK-NEXT: !44 = !DILocation(line: 27, column: 14, scope: !25)
// CHECK-NEXT: !45 = !DILocation(line: 27, column: 21, scope: !25)
// CHECK-NEXT: !46 = !DILocation(line: 27, column: 10, scope: !25)
// CHECK-NEXT: !47 = !DILocation(line: 28, column: 14, scope: !25)
// CHECK-NEXT: !48 = !DILocation(line: 28, column: 24, scope: !25)
// CHECK-NEXT: !49 = !DILocation(line: 28, column: 10, scope: !25)
// CHECK-NEXT: !50 = !DILocation(line: 29, column: 14, scope: !25)
// CHECK-NEXT: !51 = !DILocation(line: 29, column: 28, scope: !25)
// CHECK-NEXT: !52 = !DILocation(line: 29, column: 24, scope: !25)
// CHECK-NEXT: !53 = !DILocation(line: 29, column: 10, scope: !25)
// CHECK-NEXT: !54 = !DILocation(line: 30, column: 17, scope: !25)
// CHECK-NEXT: !55 = !DILocation(line: 30, column: 25, scope: !25)
// CHECK-NEXT: !56 = !DILocation(line: 30, column: 10, scope: !25)
// CHECK-NEXT: !57 = !DILocation(line: 31, column: 17, scope: !25)
// CHECK-NEXT: !58 = !DILocation(line: 31, column: 29, scope: !25)
// CHECK-NEXT: !59 = !DILocation(line: 31, column: 37, scope: !25)
// CHECK-NEXT: !60 = !DILocation(line: 31, column: 25, scope: !25)
// CHECK-NEXT: !61 = !DILocation(line: 31, column: 10, scope: !25)
// CHECK-NEXT: !62 = !DILocation(line: 35, column: 6, scope: !25)
// CHECK-NEXT: !63 = distinct !DISubprogram(name: "f", linkageName: "f", scope: null, file: !9, line: 37, type: !5, scopeLine: 37, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !64 = !DILocation(line: 37, column: 22, scope: !65)
// CHECK-NEXT: !65 = !DILexicalBlockFile(scope: !63, file: !9, discriminator: 0)
// CHECK-NEXT: !66 = !DILocation(line: 38, column: 8, scope: !65)
// CHECK-NEXT: !67 = !DILocation(line: 37, column: 6, scope: !65)
// CHECK-EMPTY:
// ASM: 	.text
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: .unreachable:
// ASM-NEXT: .func_begin0:
// ASM-NEXT: .func_end0:
// ASM-EMPTY:
// ASM-NEXT: __deploy:
// ASM-NEXT: .func_begin1:
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	nop	stack+=[1]
// ASM-NEXT: 	add	128, r0, r1
// ASM-NEXT: .tmp0:
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	2 5 4 prologue_end
// ASM-NEXT: 	st.1	64, r1
// ASM-NEXT: 	.loc	2 6 7
// ASM-NEXT: 	context.get_context_u128	r1
// ASM-NEXT: 	.loc	2 6 4 is_stmt 0
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB1_2
// ASM-NEXT: 	.loc	2 0 4
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	.loc	2 7 6 is_stmt 1
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	near_call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .BB1_2:
// ASM-NEXT: 	.loc	2 9 19
// ASM-NEXT: 	ld.1	64, r1
// ASM-NEXT: 	.loc	2 9 4 is_stmt 0
// ASM-NEXT: 	add	r1, r0, stack-[1]
// ASM-NEXT: 	add	32, r0, r1
// ASM-NEXT: 	.loc	2 11 4 is_stmt 1
// ASM-NEXT: 	st.2	256, r1
// ASM-NEXT: 	st.2	288, r0
// ASM-NEXT: 	add	256, r0, r1
// ASM-NEXT: 	add	64, r0, r2
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .tmp1:
// ASM-NEXT: .func_end1:
// ASM-EMPTY:
// ASM-NEXT: __runtime:
// ASM-NEXT: .func_begin2:
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	nop	stack+=[4]
// ASM-NEXT: 	add	128, r0, r1
// ASM-NEXT: .tmp2:
// ASM-NEXT: 	.loc	2 15 6 prologue_end
// ASM-NEXT: 	st.1	64, r1
// ASM-NEXT: 	.loc	2 16 19
// ASM-NEXT: 	add	stack[@calldatasize], r0, r1
// ASM-NEXT: 	.loc	2 16 16 is_stmt 0
// ASM-NEXT: 	sub.s!	4, r1, r1
// ASM-NEXT: 	add	0, r0, r1
// ASM-NEXT: 	add.lt	1, r0, r1
// ASM-NEXT: 	and!	1, r1, r1
// ASM-NEXT: 	.loc	2 16 6
// ASM-NEXT: 	jump.ne	@.BB2_7
// ASM-NEXT: 	.loc	2 17 33 is_stmt 1
// ASM-NEXT: 	ptr.add	stack[@ptr_calldata], r0, r1
// ASM-NEXT: 	ld	r1, r1
// ASM-NEXT: 	.loc	2 17 8 is_stmt 0
// ASM-NEXT: 	shr.s	224, r1, stack-[4]
// ASM-NEXT: 	.loc	2 17 24
// ASM-NEXT: 	shr.s	224, r1, r1
// ASM-NEXT: 	.loc	2 18 8 is_stmt 1
// ASM-NEXT: 	sub.s!	@CPI2_0[0], r1, r1
// ASM-NEXT: 	jump.ne	@.BB2_7
// ASM-NEXT: 	.loc	2 20 13
// ASM-NEXT: 	context.get_context_u128	r1
// ASM-NEXT: 	.loc	2 20 10 is_stmt 0
// ASM-NEXT: 	sub!	r1, r0, r1
// ASM-NEXT: 	jump.eq	@.BB2_4
// ASM-NEXT: 	.loc	2 21 12 is_stmt 1
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .BB2_4:
// ASM-NEXT: 	.loc	2 0 12 is_stmt 0
// ASM-NEXT: 	sub.s	4, r0, r1
// ASM-NEXT: 	.loc	2 23 17 is_stmt 1
// ASM-NEXT: 	add	stack[@calldatasize], r1, r1
// ASM-NEXT: 	sub.s	1, r0, r2
// ASM-NEXT: 	add	@CPI2_1[0], r0, r3
// ASM-NEXT: 	.loc	2 23 10 is_stmt 0
// ASM-NEXT: 	sub!	r1, r2, r2
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add.gt	r3, r0, r2
// ASM-NEXT: 	and	@CPI2_1[0], r1, r1
// ASM-NEXT: 	sub.s!	@CPI2_1[0], r1, r4
// ASM-NEXT: 	add.ge	r0, r0, r3
// ASM-NEXT: 	xor	@CPI2_1[0], r1, r1
// ASM-NEXT: 	sub.s!	@CPI2_1[0], r1, r1
// ASM-NEXT: 	add.ne	r2, r0, r3
// ASM-NEXT: 	sub!	r3, r0, r1
// ASM-NEXT: 	jump.ne	@.BB2_6
// ASM-NEXT: 	.loc	2 25 12 is_stmt 1
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .BB2_6:
// ASM-NEXT: 	.loc	2 27 21
// ASM-NEXT: 	near_call	r0, @f, @DEFAULT_UNWIND
// ASM-NEXT: 	.loc	2 27 10 is_stmt 0
// ASM-NEXT: 	add	r1, r0, stack-[3]
// ASM-NEXT: 	.loc	2 28 24 is_stmt 1
// ASM-NEXT: 	ld.1	64, r3
// ASM-NEXT: 	.loc	2 28 10 is_stmt 0
// ASM-NEXT: 	add	r3, r0, stack-[2]
// ASM-NEXT: 	.loc	2 29 10 is_stmt 1
// ASM-NEXT: 	add	32, r3, stack-[1]
// ASM-NEXT: 	.loc	2 30 10
// ASM-NEXT: 	st.1	r3, r1
// ASM-NEXT: 	add	32, r0, r2
// ASM-NEXT: 	.loc	2 31 10
// ASM-NEXT: 	add	r3, r0, r1
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .BB2_7:
// ASM-NEXT: 	.loc	2 35 6
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__revert, @DEFAULT_UNWIND
// ASM-NEXT: 	near_call	r0, @.unreachable, @DEFAULT_UNWIND
// ASM-NEXT: .tmp3:
// ASM-NEXT: .func_end2:
// ASM-EMPTY:
// ASM-NEXT: 	.globl	f
// ASM-NEXT: f:
// ASM-NEXT: .func_begin3:
// ASM-NEXT: 	.loc	2 37 0
// ASM-NEXT: 	.loc	2 38 8 prologue_end
// ASM-NEXT: 	nop	stack+=[1]
// ASM-NEXT: 	add	42, r0, stack-[1]
// ASM-NEXT: 	add	42, r0, r1
// ASM-NEXT: 	.loc	2 37 6
// ASM-NEXT: 	ret
// ASM-NEXT: .tmp4:
// ASM-NEXT: .func_end3:
// ASM-EMPTY:
// ASM-NEXT: 	.globl	__entry
// ASM-NEXT: __entry:
// ASM-NEXT: .func_begin4:
// ASM-NEXT: 	add	stack[0], r0, r13
// ASM-NEXT: 	shr.s	96, r13, r13
// ASM-NEXT: 	and	@CPI4_0[0], r13, r14
// ASM-NEXT: 	ptr.add	r1, r14, stack[@ptr_return_data]
// ASM-NEXT: 	ptr.add	r1, r14, stack[@ptr_active]
// ASM-NEXT: 	add	r3, r0, stack[@extra_abi_data]
// ASM-NEXT: 	add	r4, r0, stack[@extra_abi_data+1]
// ASM-NEXT: 	add	r5, r0, stack[@extra_abi_data+2]
// ASM-NEXT: 	add	r6, r0, stack[@extra_abi_data+3]
// ASM-NEXT: 	add	r7, r0, stack[@extra_abi_data+4]
// ASM-NEXT: 	add	r8, r0, stack[@extra_abi_data+5]
// ASM-NEXT: 	add	r9, r0, stack[@extra_abi_data+6]
// ASM-NEXT: 	add	r10, r0, stack[@extra_abi_data+7]
// ASM-NEXT: 	add	r11, r0, stack[@extra_abi_data+8]
// ASM-NEXT: 	add	r12, r0, stack[@extra_abi_data+9]
// ASM-NEXT: 	ptr.add	r1, r0, stack[@ptr_calldata]
// ASM-NEXT: 	and	@CPI4_0[0], r13, stack[@calldatasize]
// ASM-NEXT: 	add	r2, r0, stack[@call_flags]
// ASM-NEXT: 	add	0, r0, stack[@memory_pointer]
// ASM-NEXT: 	add	0, r0, stack[@returndatasize]
// ASM-NEXT: 	and!	1, r2, r1
// ASM-NEXT: 	jump.eq	@.BB4_2
// ASM-NEXT: 	near_call	r0, @__deploy, @DEFAULT_UNWIND
// ASM-NEXT: .BB4_2:
// ASM-NEXT: 	near_call	r0, @__runtime, @DEFAULT_UNWIND
// ASM-NEXT: .func_end4:
// ASM-EMPTY:
// ASM-NEXT: 	.data
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_active:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_return_data:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_calldata:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: extra_abi_data:
// ASM-NEXT: 	.zero	320
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: call_flags:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: returndatasize:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: calldatasize:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: memory_pointer:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.debug_abbrev
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	37
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	19
// ASM-NEXT: 	.byte	5
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	16
// ASM-NEXT: 	.byte	23
// ASM-NEXT: 	.byte	27
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.ascii	"\264B"
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: 	.byte	46
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	110
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	63
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	46
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	110
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	58
// ASM-NEXT: 	.byte	11
// ASM-NEXT: 	.byte	59
// ASM-NEXT: 	.byte	11
// ASM-NEXT: 	.byte	63
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.debug_info
// ASM-NEXT: .cu_begin0:
// ASM-NEXT: 	.long	@.debug_info_end0-@.debug_info_start0
// ASM-NEXT: .debug_info_start0:
// ASM-NEXT: 	.short	4
// ASM-NEXT: 	.long	@.debug_abbrev
// ASM-NEXT: 	.byte	4
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.long	@.info_string0
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.info_string1
// ASM-NEXT: 	.long	@.line_table_start0
// ASM-NEXT: 	.long	@.info_string2
// ASM-EMPTY:
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end3-@.func_begin0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end0-@.func_begin0
// ASM-NEXT: 	.long	@.info_string3
// ASM-NEXT: 	.long	@.info_string3
// ASM-EMPTY:
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin1
// ASM-NEXT: 	.long	@.func_end1-@.func_begin1
// ASM-NEXT: 	.long	@.info_string4
// ASM-NEXT: 	.long	@.info_string4
// ASM-EMPTY:
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin2
// ASM-NEXT: 	.long	@.func_end2-@.func_begin2
// ASM-NEXT: 	.long	@.info_string5
// ASM-NEXT: 	.long	@.info_string5
// ASM-EMPTY:
// ASM-NEXT: 	.byte	3
// ASM-NEXT: .cell	@.func_begin3
// ASM-NEXT: 	.long	@.func_end3-@.func_begin3
// ASM-NEXT: 	.long	@.info_string6
// ASM-NEXT: 	.long	@.info_string6
// ASM-NEXT: 	.byte	2
// ASM-NEXT: 	.byte	37
// ASM-EMPTY:
// ASM-NEXT: 	.byte	0
// ASM-NEXT: .debug_info_end0:
// ASM-NEXT: 	.debug_str
// ASM-NEXT: .info_string0:
// ASM-NEXT: 	.asciz	"mlir"
// ASM-NEXT: .info_string1:
// ASM-NEXT: 	.asciz	"LLVMDialectModule"
// ASM-NEXT: .info_string2:
// ASM-NEXT: 	.asciz	"/"
// ASM-NEXT: .info_string3:
// ASM-NEXT: 	.asciz	".unreachable"
// ASM-NEXT: .info_string4:
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: .info_string5:
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: .info_string6:
// ASM-NEXT: 	.asciz	"f"
// ASM-NEXT: 	.debug_pubnames
// ASM-NEXT: 	.long	@.pubNames_end0-@.pubNames_start0
// ASM-NEXT: .pubNames_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	249
// ASM-NEXT: 	.long	156
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: 	.long	201
// ASM-NEXT: 	.asciz	"f"
// ASM-NEXT: 	.long	66
// ASM-NEXT: 	.asciz	".unreachable"
// ASM-NEXT: 	.long	111
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubNames_end0:
// ASM-NEXT: 	.debug_pubtypes
// ASM-NEXT: 	.long	@.pubTypes_end0-@.pubTypes_start0
// ASM-NEXT: .pubTypes_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	249
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubTypes_end0:
// ASM-NEXT: 	.note.GNU-stack
// ASM-NEXT: 	.rodata
// ASM-NEXT: CPI2_0:
// ASM-NEXT: 	.cell 638722032
// ASM-NEXT: CPI2_1:
// ASM-NEXT: 	.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968
// ASM-NEXT: CPI4_0:
// ASM-NEXT: 	.cell 4294967295
// ASM-NEXT: 	.debug_line
// ASM-NEXT: .line_table_start0:
// ASM-EMPTY:
