// RUN: solc --yul --mlir-action=print-llvm-ir --mlir-target=eravm %s | FileCheck %s
// RUN: solc --yul --mlir-action=print-asm --mlir-target=eravm %s | FileCheck --check-prefix=ASM %s

object "Test" {
  code {
    let freePtr := mload(64)
    codecopy(freePtr, dataoffset("Test_deployed"), datasize("Test_deployed"))
    return(0, 0)
  }
  object "Test_deployed" {
    code {
      return(0, 0)
    }
  }
}
// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: ; ModuleID = 'LLVMDialectModule'
// CHECK-NEXT: source_filename = "LLVMDialectModule"
// CHECK-EMPTY:
// CHECK-NEXT: @ptr_active = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_return_data = private global ptr addrspace(3) undef
// CHECK-NEXT: @ptr_calldata = private global ptr addrspace(3) undef
// CHECK-NEXT: @extra_abi_data = private global [10 x i256] zeroinitializer, align 32
// CHECK-NEXT: @call_flags = private global i256 0, align 32
// CHECK-NEXT: @returndatasize = private global i256 0, align 32
// CHECK-NEXT: @calldatasize = private global i256 0, align 32
// CHECK-NEXT: @memory_pointer = private global i256 0, align 32
// CHECK-EMPTY:
// CHECK-NEXT: declare ptr @malloc(i64)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @free(ptr)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @__return(i256, i256, i256)
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__deploy() !dbg !3 {
// CHECK-NEXT:   %1 = alloca i256, i256 1, align 32, !dbg !7
// CHECK-NEXT:   %2 = load i256, ptr addrspace(1) inttoptr (i256 64 to ptr addrspace(1)), align 1, !dbg !10
// CHECK-NEXT:   store i256 %2, ptr %1, align 32, !dbg !11
// CHECK-NEXT:   %3 = load i256, ptr %1, align 32, !dbg !12
// CHECK-NEXT:   %4 = inttoptr i256 %3 to ptr addrspace(1), !dbg !13
// CHECK-NEXT:   %5 = load ptr addrspace(3), ptr @ptr_calldata, align 32, !dbg !13
// CHECK-NEXT:   %6 = getelementptr i8, ptr addrspace(3) %5, i256 0, !dbg !13
// CHECK-NEXT:   call void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) %4, ptr addrspace(3) %6, i256 0, i1 false), !dbg !13
// CHECK-NEXT:   store i256 32, ptr addrspace(2) inttoptr (i256 256 to ptr addrspace(2)), align 32, !dbg !14
// CHECK-NEXT:   store i256 0, ptr addrspace(2) inttoptr (i256 288 to ptr addrspace(2)), align 32, !dbg !14
// CHECK-NEXT:   call void @__return(i256 256, i256 64, i256 2), !dbg !14
// CHECK-NEXT:   unreachable, !dbg !14
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__runtime() !dbg !15 {
// CHECK-NEXT:   call void @__return(i256 0, i256 0, i256 0), !dbg !16
// CHECK-NEXT:   unreachable, !dbg !16
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define i256 @__entry(ptr addrspace(3) %0, i256 %1, i256 %2, i256 %3, i256 %4, i256 %5, i256 %6, i256 %7, i256 %8, i256 %9, i256 %10, i256 %11) {
// CHECK-NEXT:   store i256 0, ptr @memory_pointer, align 32
// CHECK-NEXT:   store i256 0, ptr @calldatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @returndatasize, align 32
// CHECK-NEXT:   store i256 0, ptr @call_flags, align 32
// CHECK-NEXT:   store <10 x i256> zeroinitializer, ptr @extra_abi_data, align 512
// CHECK-NEXT:   store ptr addrspace(3) %0, ptr @ptr_calldata, align 32
// CHECK-NEXT:   store i256 and (i256 lshr (i256 ptrtoint (ptr @ptr_calldata to i256), i256 96), i256 4294967295), ptr @calldatasize, align 32
// CHECK-NEXT:   %13 = load i256, ptr @calldatasize, align 32
// CHECK-NEXT:   %14 = getelementptr i8, ptr addrspace(3) %0, i256 %13
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_return_data, align 32
// CHECK-NEXT:   store ptr addrspace(3) %14, ptr @ptr_active, align 32
// CHECK-NEXT:   store i256 %1, ptr @call_flags, align 32
// CHECK-NEXT:   store i256 %2, ptr @extra_abi_data, align 32
// CHECK-NEXT:   store i256 %3, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 1), align 32
// CHECK-NEXT:   store i256 %4, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 2), align 32
// CHECK-NEXT:   store i256 %5, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 3), align 32
// CHECK-NEXT:   store i256 %6, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 4), align 32
// CHECK-NEXT:   store i256 %7, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 5), align 32
// CHECK-NEXT:   store i256 %8, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 6), align 32
// CHECK-NEXT:   store i256 %9, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 7), align 32
// CHECK-NEXT:   store i256 %10, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 8), align 32
// CHECK-NEXT:   store i256 %11, ptr getelementptr inbounds ([10 x i256], ptr @extra_abi_data, i256 0, i256 9), align 32
// CHECK-NEXT:   %15 = and i256 %1, 1
// CHECK-NEXT:   %16 = icmp eq i256 %15, 1
// CHECK-NEXT:   br i1 %16, label %17, label %18
// CHECK-EMPTY:
// CHECK-NEXT: 17:                                               ; preds = %12
// CHECK-NEXT:   call void @__deploy()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 18:                                               ; preds = %12
// CHECK-NEXT:   call void @__runtime()
// CHECK-NEXT:   br label %19
// CHECK-EMPTY:
// CHECK-NEXT: 19:                                               ; preds = %17, %18
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: ; Function Attrs: argmemonly nocallback nofree nounwind willreturn
// CHECK-NEXT: declare void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(3) noalias nocapture readonly, i256, i1 immarg) #0
// CHECK-EMPTY:
// CHECK-NEXT: attributes #0 = { argmemonly nocallback nofree nounwind willreturn }
// CHECK-EMPTY:
// CHECK-NEXT: !llvm.dbg.cu = !{!0}
// CHECK-NEXT: !llvm.module.flags = !{!2}
// CHECK-EMPTY:
// CHECK-NEXT: !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "mlir", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
// CHECK-NEXT: !1 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !2 = !{i32 2, !"Debug Info Version", i32 3}
// CHECK-NEXT: !3 = distinct !DISubprogram(name: "__deploy", linkageName: "__deploy", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !4 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !5 = !DISubroutineType(types: !6)
// CHECK-NEXT: !6 = !{}
// CHECK-NEXT: !7 = !DILocation(line: 5, column: 8, scope: !8)
// CHECK-NEXT: !8 = !DILexicalBlockFile(scope: !3, file: !9, discriminator: 0)
// CHECK-NEXT: !9 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !10 = !DILocation(line: 5, column: 19, scope: !8)
// CHECK-NEXT: !11 = !DILocation(line: 5, column: 4, scope: !8)
// CHECK-NEXT: !12 = !DILocation(line: 6, column: 13, scope: !8)
// CHECK-NEXT: !13 = !DILocation(line: 6, column: 4, scope: !8)
// CHECK-NEXT: !14 = !DILocation(line: 7, column: 4, scope: !8)
// CHECK-NEXT: !15 = distinct !DISubprogram(name: "__runtime", linkageName: "__runtime", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !16 = !DILocation(line: 11, column: 6, scope: !17)
// CHECK-NEXT: !17 = !DILexicalBlockFile(scope: !15, file: !9, discriminator: 0)
// CHECK-EMPTY:
// ASM: 	.text
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: __deploy:
// ASM-NEXT: .func_begin0:
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	2 5 19 prologue_end
// ASM-NEXT: 	nop	stack+=[1]
// ASM-NEXT: 	ld.1	64, r1
// ASM-NEXT: 	.loc	2 5 4 is_stmt 0
// ASM-NEXT: 	add	r1, r0, stack-[1]
// ASM-NEXT: 	add	32, r0, r1
// ASM-NEXT: 	.loc	2 7 4 is_stmt 1
// ASM-NEXT: 	st.2	256, r1
// ASM-NEXT: 	st.2	288, r0
// ASM-NEXT: 	add	256, r0, r1
// ASM-NEXT: 	add	64, r0, r2
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: .tmp0:
// ASM-NEXT: .func_end0:
// ASM-EMPTY:
// ASM-NEXT: __runtime:
// ASM-NEXT: .func_begin1:
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	.loc	2 11 6 prologue_end
// ASM-NEXT: 	add	r0, r0, r1
// ASM-NEXT: 	add	r0, r0, r2
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: .tmp1:
// ASM-NEXT: .func_end1:
// ASM-EMPTY:
// ASM-NEXT: 	.globl	__entry
// ASM-NEXT: __entry:
// ASM-NEXT: .func_begin2:
// ASM-NEXT: 	add	stack[0], r0, r13
// ASM-NEXT: 	shr.s	96, r13, r13
// ASM-NEXT: 	and	@CPI2_0[0], r13, r14
// ASM-NEXT: 	ptr.add	r1, r14, stack[@ptr_return_data]
// ASM-NEXT: 	ptr.add	r1, r14, stack[@ptr_active]
// ASM-NEXT: 	add	r3, r0, stack[@extra_abi_data]
// ASM-NEXT: 	add	r4, r0, stack[@extra_abi_data+1]
// ASM-NEXT: 	add	r5, r0, stack[@extra_abi_data+2]
// ASM-NEXT: 	add	r6, r0, stack[@extra_abi_data+3]
// ASM-NEXT: 	add	r7, r0, stack[@extra_abi_data+4]
// ASM-NEXT: 	add	r8, r0, stack[@extra_abi_data+5]
// ASM-NEXT: 	add	r9, r0, stack[@extra_abi_data+6]
// ASM-NEXT: 	add	r10, r0, stack[@extra_abi_data+7]
// ASM-NEXT: 	add	r11, r0, stack[@extra_abi_data+8]
// ASM-NEXT: 	add	r12, r0, stack[@extra_abi_data+9]
// ASM-NEXT: 	ptr.add	r1, r0, stack[@ptr_calldata]
// ASM-NEXT: 	and	@CPI2_0[0], r13, stack[@calldatasize]
// ASM-NEXT: 	add	r2, r0, stack[@call_flags]
// ASM-NEXT: 	add	0, r0, stack[@memory_pointer]
// ASM-NEXT: 	add	0, r0, stack[@returndatasize]
// ASM-NEXT: 	and!	1, r2, r1
// ASM-NEXT: 	jump.eq	@.BB2_2
// ASM-NEXT: 	near_call	r0, @__deploy, @DEFAULT_UNWIND
// ASM-NEXT: .BB2_2:
// ASM-NEXT: 	near_call	r0, @__runtime, @DEFAULT_UNWIND
// ASM-NEXT: .func_end2:
// ASM-EMPTY:
// ASM-NEXT: 	.data
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_active:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_return_data:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: ptr_calldata:
// ASM-NEXT: 	.zero	32
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: extra_abi_data:
// ASM-NEXT: 	.zero	320
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: call_flags:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: returndatasize:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: calldatasize:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.p2align	5
// ASM-NEXT: memory_pointer:
// ASM-NEXT: 	.cell 0
// ASM-EMPTY:
// ASM-NEXT: 	.debug_abbrev
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	37
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	19
// ASM-NEXT: 	.byte	5
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	16
// ASM-NEXT: 	.byte	23
// ASM-NEXT: 	.byte	27
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.ascii	"\264B"
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: 	.byte	46
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	110
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	63
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.debug_info
// ASM-NEXT: .cu_begin0:
// ASM-NEXT: 	.long	@.debug_info_end0-@.debug_info_start0
// ASM-NEXT: .debug_info_start0:
// ASM-NEXT: 	.short	4
// ASM-NEXT: 	.long	@.debug_abbrev
// ASM-NEXT: 	.byte	4
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.long	@.info_string0
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.info_string1
// ASM-NEXT: 	.long	@.line_table_start0
// ASM-NEXT: 	.long	@.info_string2
// ASM-EMPTY:
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end1-@.func_begin0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end0-@.func_begin0
// ASM-NEXT: 	.long	@.info_string3
// ASM-NEXT: 	.long	@.info_string3
// ASM-EMPTY:
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin1
// ASM-NEXT: 	.long	@.func_end1-@.func_begin1
// ASM-NEXT: 	.long	@.info_string4
// ASM-NEXT: 	.long	@.info_string4
// ASM-EMPTY:
// ASM-NEXT: 	.byte	0
// ASM-NEXT: .debug_info_end0:
// ASM-NEXT: 	.debug_str
// ASM-NEXT: .info_string0:
// ASM-NEXT: 	.asciz	"mlir"
// ASM-NEXT: .info_string1:
// ASM-NEXT: 	.asciz	"LLVMDialectModule"
// ASM-NEXT: .info_string2:
// ASM-NEXT: 	.asciz	"/"
// ASM-NEXT: .info_string3:
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: .info_string4:
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: 	.debug_pubnames
// ASM-NEXT: 	.long	@.pubNames_end0-@.pubNames_start0
// ASM-NEXT: .pubNames_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	157
// ASM-NEXT: 	.long	111
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: 	.long	66
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubNames_end0:
// ASM-NEXT: 	.debug_pubtypes
// ASM-NEXT: 	.long	@.pubTypes_end0-@.pubTypes_start0
// ASM-NEXT: .pubTypes_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	157
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubTypes_end0:
// ASM-NEXT: 	.note.GNU-stack
// ASM-NEXT: 	.rodata
// ASM-NEXT: CPI2_0:
// ASM-NEXT: 	.cell 4294967295
// ASM-NEXT: 	.debug_line
// ASM-NEXT: .line_table_start0:
// ASM-EMPTY:
