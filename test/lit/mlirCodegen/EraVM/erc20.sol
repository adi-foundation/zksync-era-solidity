// RUN: solc --mlir-action=print-std-mlir --mlir-target=eravm --mmlir --mlir-print-debuginfo %s | FileCheck %s

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0;

contract ERC20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;
  uint256 private _totalSupply;
  string private _name;
  string private _symbol;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  function _msgSender() internal view returns (address) {
    return msg.sender;
  }

  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function decimals() public view returns (uint256) {
    return 18;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount)
      public returns (bool) {
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][_msgSender()];
    // TODO:
    // require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
    unchecked {
      _approve(sender, _msgSender(), currentAllowance - amount);
    }

    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public
      returns (bool) {
    // TODO: checked
    unchecked {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
    }
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public
      returns (bool) {
    uint256 currentAllowance = _allowances[_msgSender()][spender];
    // TODO:
    // require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
      _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

    return true;
  }

  function _transfer(address sender, address recipient, uint256 amount) public {
    // TODO:
    // require(sender != address(0), "ERC20: transfer from the zero address");
    // require(recipient != address(0), "ERC20: transfer to the zero address");

    uint256 senderBalance = _balances[sender];
    // TODO:
    // require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
    unchecked {
      _balances[sender] = senderBalance - amount;
      // TODO:
      _balances[recipient] += amount; // TODO: checked
    }
    emit Transfer(sender, recipient, amount);
  }

  function _mint(address account, uint256 amount) public {
    // TODO:
    // require(account != address(0), "ERC20: mint to the zero address");

    // TODO: checked
    unchecked {
      _totalSupply += amount;
      _balances[account] += amount;
    }
    emit Transfer(address(0), account, amount);
  }

  function _burn(address account, uint256 amount) public {
    // TODO:
    // require(account != address(0), "ERC20: burn from the zero address");

    uint256 accountBalance = _balances[account];
    // TODO:
    // require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {
      _balances[account] = accountBalance - amount;
      _totalSupply -= amount; // TODO: checked
    }

    emit Transfer(account, address(0), amount);
  }

  function _approve(address owner, address spender, uint256 amount) public {
    // TODO:
    // require(owner != address(0), "ERC20: approve from the zero address");
    // require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc2 = loc({{.*}}:6:0)
// CHECK-NEXT: #loc4 = loc({{.*}}:132:20)
// CHECK-NEXT: #loc5 = loc({{.*}}:132:35)
// CHECK-NEXT: #loc6 = loc({{.*}}:132:52)
// CHECK-NEXT: #loc17 = loc({{.*}}:117:17)
// CHECK-NEXT: #loc18 = loc({{.*}}:117:34)
// CHECK-NEXT: #loc35 = loc({{.*}}:105:17)
// CHECK-NEXT: #loc36 = loc({{.*}}:105:34)
// CHECK-NEXT: #loc47 = loc({{.*}}:89:21)
// CHECK-NEXT: #loc48 = loc({{.*}}:89:37)
// CHECK-NEXT: #loc49 = loc({{.*}}:89:56)
// CHECK-NEXT: #loc65 = loc({{.*}}:77:29)
// CHECK-NEXT: #loc66 = loc({{.*}}:77:46)
// CHECK-NEXT: #loc79 = loc({{.*}}:68:29)
// CHECK-NEXT: #loc80 = loc({{.*}}:68:46)
// CHECK-NEXT: #loc91 = loc({{.*}}:54:24)
// CHECK-NEXT: #loc92 = loc({{.*}}:54:40)
// CHECK-NEXT: #loc93 = loc({{.*}}:54:59)
// CHECK-NEXT: #loc110 = loc({{.*}}:49:19)
// CHECK-NEXT: #loc111 = loc({{.*}}:49:36)
// CHECK-NEXT: #loc119 = loc({{.*}}:45:21)
// CHECK-NEXT: #loc120 = loc({{.*}}:45:36)
// CHECK-NEXT: #loc126 = loc({{.*}}:40:20)
// CHECK-NEXT: #loc127 = loc({{.*}}:40:39)
// CHECK-NEXT: #loc135 = loc({{.*}}:36:21)
// CHECK-NEXT: module {
// CHECK-NEXT:   func.func private @__return(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__farcall(i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @".unreachable"() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     llvm.unreachable loc(#loc1)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__revert(i256, i256, i256) attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__sha3(!llvm.ptr<1>, i256, i1) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT:   func.func private @__deploy() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %1 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %2 = arith.cmpi ne, %1, %c0_i256 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %2 {
// CHECK-NEXT:       %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %c2_i256_10 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:       func.call @__revert(%c0_i256_8, %c0_i256_9, %c2_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c64_i256_0 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %3 = llvm.inttoptr %c64_i256_0 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %5 = llvm.inttoptr %4 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %8 = llvm.getelementptr %7[%c0_i256_1] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:     "llvm.intr.memcpy"(%5, %8, %c0_i256_2) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<3>, i256) -> () loc(#loc2)
// CHECK-NEXT:     %c256_i256 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.inttoptr %c256_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c32_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c288_i256 = arith.constant 288 : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.inttoptr %c288_i256 : i256 to !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_3, %10 {alignment = 1 : i64} : i256, !llvm.ptr<2> loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %11 = arith.muli %c0_i256_4, %c2_i256 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %12 = arith.addi %11, %c64_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:     %c256_i256_6 = arith.constant 256 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_7 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     call @__return(%c256_i256_6, %12, %c2_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func private @__runtime() attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime} {
// CHECK-NEXT:     %c128_i256 = arith.constant 128 : i256 loc(#loc2)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:     %0 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     llvm.store %c128_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %3 = arith.cmpi uge, %2, %c4_i256 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %3 {
// CHECK-NEXT:       %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:       %4 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:       %5 = llvm.load %4 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:       %6 = llvm.getelementptr %5[%c0_i256_2] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:       %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:       scf.int_switch %7 : i256
// CHECK-NEXT:       case 117300739 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_8, %c0_i256_9, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = func.call @_msgSender_42() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.addi %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %14 = arith.addi %12, %c0_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %10, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %16 = arith.subi %13, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%12, %16, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 2514000705 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_12, %c0_i256_13) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = func.call @name_50() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.addi %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %14 = arith.addi %12, %c0_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.subi %13, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %15, %16 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.inttoptr %10 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.inttoptr %13 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = arith.addi %10, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = arith.addi %13, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %23 = llvm.inttoptr %20 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         "llvm.intr.memmove"(%22, %23, %18) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %21, %18 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %c0_i256_9, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c31_i256 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:         %26 = arith.addi %18, %c31_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.andi %26, %c4294967264_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %21, %27 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.subi %28, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%12, %29, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 826074471 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_12, %c0_i256_13) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = func.call @symbol_58() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.addi %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %14 = arith.addi %12, %c0_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.subi %13, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %15, %16 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.inttoptr %10 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.inttoptr %13 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = arith.addi %10, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = arith.addi %13, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %23 = llvm.inttoptr %20 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         "llvm.intr.memmove"(%22, %23, %18) <{isVolatile = false}> : (!llvm.ptr<1>, !llvm.ptr<1>, i256) -> () loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %21, %18 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %c0_i256_9, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %c31_i256 = arith.constant 31 : i256 loc(#loc2)
// CHECK-NEXT:         %26 = arith.addi %18, %c31_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc2)
// CHECK-NEXT:         %27 = arith.andi %26, %c4294967264_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %21, %27 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.subi %28, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%12, %29, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 404098525 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_8, %c0_i256_9, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = func.call @decimals_66() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.addi %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %14 = arith.addi %12, %c0_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %10, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %16 = arith.subi %13, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%12, %16, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1889567281 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_8, %c0_i256_9, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = func.call @totalSupply_74() : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_5 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.inttoptr %c64_i256_5 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %13 = arith.addi %12, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %14 = arith.addi %12, %c0_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = llvm.inttoptr %14 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %10, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %16 = arith.subi %13, %12 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%12, %16, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 2835717307 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_9, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %15 = func.call @balanceOf_86(%14) : (i256) -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %18 = arith.addi %17, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %19 = arith.addi %17, %c0_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %19 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %15, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %21 = arith.subi %18, %17 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%17, %21, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 3714247998 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = func.call @transfer_105(%14, %19) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %22, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %22, %c0_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = arith.extui %20 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %27 = arith.subi %23, %22 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%22, %27, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 157198259 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = func.call @allowance_121(%14, %19) : (i256, i256) -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %22, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %22, %c0_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %20, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = arith.subi %23, %22 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%22, %26, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 599290589 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = func.call @approve_140(%14, %19) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %22, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %22, %c0_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = arith.extui %20 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %27 = arith.subi %23, %22 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%22, %27, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 961581905 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_11, %c0_i256_12, %c0_i256_13) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = arith.addi %c4_i256_4, %c64_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %23 = llvm.getelementptr %22[%20] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.load %23 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %25 = func.call @transferFrom_179(%14, %19, %24) : (i256, i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %27 = llvm.load %26 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_8 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %28 = arith.addi %27, %c32_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %29 = arith.addi %27, %c0_i256_9 : i256 loc(#loc2)
// CHECK-NEXT:         %30 = arith.extui %25 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %31 = llvm.inttoptr %29 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %30, %31 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %32 = arith.subi %28, %27 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%27, %32, %c0_i256_10) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 2757214935 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = func.call @increaseAllowance_206(%14, %19) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %22, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %22, %c0_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = arith.extui %20 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %27 = arith.subi %23, %22 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%22, %27, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 820017310 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %20 = func.call @decreaseAllowance_237(%14, %19) : (i256, i256) -> i1 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256_7 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %23 = arith.addi %22, %c32_i256_7 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %24 = arith.addi %22, %c0_i256_8 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = arith.extui %20 : i1 to i256 loc(#loc2)
// CHECK-NEXT:         %26 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         llvm.store %25, %26 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %27 = arith.subi %23, %22 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%22, %27, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1315881543 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_10, %c0_i256_11, %c0_i256_12) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = arith.addi %c4_i256_4, %c64_i256_6 : i256 loc(#loc2)
// CHECK-NEXT:         %21 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %22 = llvm.load %21 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %23 = llvm.getelementptr %22[%20] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %24 = llvm.load %23 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         func.call @_transfer_274(%14, %19, %24) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_7 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %25 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%26, %c0_i256_8, %c0_i256_9) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 1633807128 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_9, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         func.call @_mint_302(%14, %19) : (i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.load %20 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%21, %c0_i256_7, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       case 273580543 {
// CHECK-NEXT:         %8 = "llvm.intrcall"() <{id = 3177 : i32, name = "eravm.getu128"}> : () -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %9 = arith.cmpi ne, %8, %c0_i256_3 : i256 loc(#loc2)
// CHECK-NEXT:         scf.if %9 {
// CHECK-NEXT:           %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:           func.call @__revert(%c0_i256_9, %c0_i256_10, %c0_i256_11) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:           func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         } loc(#loc2)
// CHECK-NEXT:         %c4_i256_4 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %10 = arith.addi %c4_i256_4, %c0_i256_5 : i256 loc(#loc2)
// CHECK-NEXT:         %11 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %12 = llvm.load %11 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %13 = llvm.getelementptr %12[%10] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         %c32_i256 = arith.constant 32 : i256 loc(#loc2)
// CHECK-NEXT:         %15 = arith.addi %c4_i256_4, %c32_i256 : i256 loc(#loc2)
// CHECK-NEXT:         %16 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %17 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:         %18 = llvm.getelementptr %17[%15] : (!llvm.ptr<3>, i256) -> !llvm.ptr<3>, i8 loc(#loc2)
// CHECK-NEXT:         %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<3> -> i256 loc(#loc2)
// CHECK-NEXT:         func.call @_burn_338(%14, %19) : (i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         %c64_i256_6 = arith.constant 64 : i256 loc(#loc2)
// CHECK-NEXT:         %20 = llvm.inttoptr %c64_i256_6 : i256 to !llvm.ptr<1> loc(#loc2)
// CHECK-NEXT:         %21 = llvm.load %20 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:         func.call @__return(%21, %c0_i256_7, %c0_i256_8) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:         func.call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       }
// CHECK-NEXT:       default {
// CHECK-NEXT:         scf.yield loc(#loc2)
// CHECK-NEXT:       } loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     call @__revert(%c0_i256, %c0_i256_0, %c0_i256_1) : (i256, i256, i256) -> () loc(#loc2)
// CHECK-NEXT:     call @".unreachable"() : () -> () loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_decommit() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_return_data() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_calldata() {addr_space = 0 : i32} : !llvm.ptr<3> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @ptr_active() {addr_space = 0 : i32} : !llvm.array<16 x ptr<3>> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @extra_abi_data(dense<0> : tensor<10xi256>) {addr_space = 0 : i32} : !llvm.array<10 x i256> loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @call_flags(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @returndatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @calldatasize(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   llvm.mlir.global private @memory_pointer(0 : i256) {addr_space = 0 : i32} : i256 loc(#loc)
// CHECK-NEXT:   func.func private @__entry(%arg0: !llvm.ptr<3> loc({{.*}}:6:0), %arg1: i256 loc({{.*}}:6:0), %arg2: i256 loc({{.*}}:6:0), %arg3: i256 loc({{.*}}:6:0), %arg4: i256 loc({{.*}}:6:0), %arg5: i256 loc({{.*}}:6:0), %arg6: i256 loc({{.*}}:6:0), %arg7: i256 loc({{.*}}:6:0), %arg8: i256 loc({{.*}}:6:0), %arg9: i256 loc({{.*}}:6:0), %arg10: i256 loc({{.*}}:6:0), %arg11: i256 loc({{.*}}:6:0)) -> i256 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} {
// CHECK-NEXT:     %0 = llvm.mlir.addressof @memory_pointer : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %1 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_0, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %2 = llvm.mlir.addressof @returndatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_1, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %3 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     llvm.store %c0_i256_2, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %4 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %5 = llvm.mlir.constant(dense<0> : vector<10xi256>) : vector<10xi256> loc(#loc2)
// CHECK-NEXT:     llvm.store %5, %4 : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %6 = llvm.mlir.addressof @ptr_calldata : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg0, %6 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %7 = llvm.ptrtoint %6 : !llvm.ptr<ptr<3>> to i256 loc(#loc2)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc2)
// CHECK-NEXT:     %8 = llvm.lshr %7, %c96_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc2)
// CHECK-NEXT:     %9 = llvm.and %8, %c4294967295_i256  : i256 loc(#loc2)
// CHECK-NEXT:     %10 = llvm.mlir.addressof @calldatasize : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %11 = llvm.load %10 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %12 = llvm.getelementptr %arg0[%11] : (!llvm.ptr<3>, i256) -> !llvm.ptr, i8 loc(#loc2)
// CHECK-NEXT:     %13 = llvm.mlir.addressof @ptr_return_data : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %14 = llvm.mlir.addressof @ptr_decommit : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %14 {alignment = 32 : i64} : !llvm.ptr<ptr<3>> loc(#loc2)
// CHECK-NEXT:     %15 = llvm.mlir.addressof @ptr_active : !llvm.ptr<array<16 x ptr<3>>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %16 = llvm.getelementptr %15[%c0_i256_3, %c0_i256_4] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %16 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %17 = llvm.getelementptr %15[%c0_i256_5, %c1_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %17 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_6 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %18 = llvm.getelementptr %15[%c0_i256_6, %c2_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %18 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_7 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %19 = llvm.getelementptr %15[%c0_i256_7, %c3_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %19 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_8 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %20 = llvm.getelementptr %15[%c0_i256_8, %c4_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %20 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %21 = llvm.getelementptr %15[%c0_i256_9, %c5_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %21 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %22 = llvm.getelementptr %15[%c0_i256_10, %c6_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %22 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %23 = llvm.getelementptr %15[%c0_i256_11, %c7_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %23 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_12 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %24 = llvm.getelementptr %15[%c0_i256_12, %c8_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %24 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_13 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %25 = llvm.getelementptr %15[%c0_i256_13, %c9_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %25 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c10_i256 = arith.constant 10 : i256 loc(#loc2)
// CHECK-NEXT:     %26 = llvm.getelementptr %15[%c0_i256_14, %c10_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %26 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c11_i256 = arith.constant 11 : i256 loc(#loc2)
// CHECK-NEXT:     %27 = llvm.getelementptr %15[%c0_i256_15, %c11_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %27 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_16 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c12_i256 = arith.constant 12 : i256 loc(#loc2)
// CHECK-NEXT:     %28 = llvm.getelementptr %15[%c0_i256_16, %c12_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %28 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_17 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c13_i256 = arith.constant 13 : i256 loc(#loc2)
// CHECK-NEXT:     %29 = llvm.getelementptr %15[%c0_i256_17, %c13_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %29 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_18 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c14_i256 = arith.constant 14 : i256 loc(#loc2)
// CHECK-NEXT:     %30 = llvm.getelementptr %15[%c0_i256_18, %c14_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %30 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %c0_i256_19 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c15_i256 = arith.constant 15 : i256 loc(#loc2)
// CHECK-NEXT:     %31 = llvm.getelementptr %15[%c0_i256_19, %c15_i256] : (!llvm.ptr<array<16 x ptr<3>>>, i256, i256) -> !llvm.ptr<3>, !llvm.array<16 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %12, %31 {alignment = 32 : i64} : !llvm.ptr, !llvm.ptr<3> loc(#loc2)
// CHECK-NEXT:     %32 = llvm.mlir.addressof @call_flags : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg1, %32 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %33 = llvm.mlir.addressof @extra_abi_data : !llvm.ptr<array<10 x i256>> loc(#loc2)
// CHECK-NEXT:     %c0_i256_20 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %34 = llvm.getelementptr %33[%c0_i256_20, %c0_i256_21] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg2, %34 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_22 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_23 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %35 = llvm.getelementptr %33[%c0_i256_22, %c1_i256_23] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg3, %35 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_24 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c2_i256_25 = arith.constant 2 : i256 loc(#loc2)
// CHECK-NEXT:     %36 = llvm.getelementptr %33[%c0_i256_24, %c2_i256_25] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg4, %36 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_26 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c3_i256_27 = arith.constant 3 : i256 loc(#loc2)
// CHECK-NEXT:     %37 = llvm.getelementptr %33[%c0_i256_26, %c3_i256_27] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg5, %37 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_28 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c4_i256_29 = arith.constant 4 : i256 loc(#loc2)
// CHECK-NEXT:     %38 = llvm.getelementptr %33[%c0_i256_28, %c4_i256_29] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg6, %38 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_30 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c5_i256_31 = arith.constant 5 : i256 loc(#loc2)
// CHECK-NEXT:     %39 = llvm.getelementptr %33[%c0_i256_30, %c5_i256_31] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg7, %39 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_32 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c6_i256_33 = arith.constant 6 : i256 loc(#loc2)
// CHECK-NEXT:     %40 = llvm.getelementptr %33[%c0_i256_32, %c6_i256_33] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg8, %40 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_34 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c7_i256_35 = arith.constant 7 : i256 loc(#loc2)
// CHECK-NEXT:     %41 = llvm.getelementptr %33[%c0_i256_34, %c7_i256_35] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg9, %41 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_36 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c8_i256_37 = arith.constant 8 : i256 loc(#loc2)
// CHECK-NEXT:     %42 = llvm.getelementptr %33[%c0_i256_36, %c8_i256_37] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg10, %42 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c0_i256_38 = arith.constant 0 : i256 loc(#loc2)
// CHECK-NEXT:     %c9_i256_39 = arith.constant 9 : i256 loc(#loc2)
// CHECK-NEXT:     %43 = llvm.getelementptr %33[%c0_i256_38, %c9_i256_39] : (!llvm.ptr<array<10 x i256>>, i256, i256) -> !llvm.ptr, !llvm.array<10 x i256> loc(#loc2)
// CHECK-NEXT:     llvm.store %arg11, %43 {alignment = 32 : i64} : i256, !llvm.ptr loc(#loc2)
// CHECK-NEXT:     %c1_i256_40 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %44 = arith.andi %arg1, %c1_i256_40 : i256 loc(#loc2)
// CHECK-NEXT:     %c1_i256_41 = arith.constant 1 : i256 loc(#loc2)
// CHECK-NEXT:     %45 = arith.cmpi eq, %44, %c1_i256_41 : i256 loc(#loc2)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       func.call @__deploy() : () -> () loc(#loc2)
// CHECK-NEXT:     } else {
// CHECK-NEXT:       func.call @__runtime() : () -> () loc(#loc2)
// CHECK-NEXT:     } loc(#loc2)
// CHECK-NEXT:     llvm.unreachable loc(#loc2)
// CHECK-NEXT:   } loc(#loc)
// CHECK-NEXT:   func.func @_approve_362.0(%arg0: i256 loc({{.*}}:132:20), %arg1: i256 loc({{.*}}:132:35), %arg2: i256 loc({{.*}}:132:52)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc6)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc8)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc9)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc9)
// CHECK-NEXT:     %13 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %14 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc9)
// CHECK-NEXT:     llvm.store %13, %14 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc9)
// CHECK-NEXT:     %15 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc12)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %18 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc15)
// CHECK-NEXT:     %c32_i256_8 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %20 = arith.addi %19, %c32_i256_8 : i256 loc(#loc15)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %21 = arith.addi %19, %c0_i256_9 : i256 loc(#loc15)
// CHECK-NEXT:     %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %17, %22 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %23 = arith.subi %20, %19 : i256 loc(#loc15)
// CHECK-NEXT:     %c50857715716685556425904105453071271481286891662805453476519619806107580839465_i256 = arith.constant 50857715716685556425904105453071271481286891662805453476519619806107580839465 : i256 loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %24 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %24 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %25 = arith.cmpi ule, %19, %c4294967295_i256 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %25 {
// CHECK-NEXT:       llvm.store %19, %24 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %26 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256_10 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64_11 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %27 = llvm.alloca %c1_i64_11 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256_10, %27 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %28 = arith.cmpi ule, %23, %c4294967295_i256_10 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %28 {
// CHECK-NEXT:       llvm.store %23, %27 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %29 = llvm.load %27 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %30 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256_12 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64_13 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %31 = llvm.alloca %c1_i64_13 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256_12, %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %32 = arith.cmpi ule, %30, %c4294967295_i256_12 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %32 {
// CHECK-NEXT:       llvm.store %30, %31 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %33 = llvm.load %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c64_i256_14 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %34 = arith.shli %26, %c64_i256_14 : i256 loc(#loc15)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc15)
// CHECK-NEXT:     %35 = arith.shli %29, %c96_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc15)
// CHECK-NEXT:     %36 = arith.shli %33, %c192_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %37 = arith.addi %34, %35 : i256 loc(#loc15)
// CHECK-NEXT:     %38 = arith.addi %37, %36 : i256 loc(#loc15)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc15)
// CHECK-NEXT:     %39 = arith.addi %38, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc15)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc15)
// CHECK-NEXT:     %40 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %41 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %42 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %43 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %44 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %45 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %46:2 = call @__farcall(%39, %c32781_i256, %c3_i256, %c50857715716685556425904105453071271481286891662805453476519619806107580839465_i256, %15, %16, %40, %41, %42, %43, %44, %45) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc15)
// CHECK-NEXT:     %false_15 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %47 = arith.cmpi eq, %46#1, %false_15 : i1 loc(#loc15)
// CHECK-NEXT:     scf.if %47 {
// CHECK-NEXT:       %c0_i256_16 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:       %c0_i256_17 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc15)
// CHECK-NEXT:       func.call @__revert(%c0_i256_16, %c0_i256_17, %c2_i256) : (i256, i256, i256) -> () loc(#loc15)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func @_burn_338.0(%arg0: i256 loc({{.*}}:117:17), %arg1: i256 loc({{.*}}:117:34)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc17)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc19)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc22)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     llvm.store %c0_i256, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc22)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc22)
// CHECK-NEXT:     %8 = llvm.inttoptr %7 : i256 to !llvm.ptr<5> loc(#loc22)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc22)
// CHECK-NEXT:     llvm.store %9, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %10 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc24)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     llvm.store %10, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc24)
// CHECK-NEXT:     %12 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     llvm.store %c0_i256_3, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc24)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %14 = call @__sha3(%13, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc24)
// CHECK-NEXT:     %15 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc26)
// CHECK-NEXT:     %17 = arith.subi %15, %16 : i256 loc(#loc25)
// CHECK-NEXT:     %18 = llvm.inttoptr %14 : i256 to !llvm.ptr<5> loc(#loc24)
// CHECK-NEXT:     llvm.store %17, %18 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc24)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %19 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %c2_i256_8 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %20 = llvm.inttoptr %c2_i256_8 : i256 to !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     %21 = llvm.load %20 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc29)
// CHECK-NEXT:     %22 = arith.subi %21, %19 : i256 loc(#loc29)
// CHECK-NEXT:     %23 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     llvm.store %22, %23 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     %24 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc31)
// CHECK-NEXT:     %25 = arith.extui %c0_i8 : i8 to i256 loc(#loc31)
// CHECK-NEXT:     %26 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %c64_i256_9 = arith.constant 64 : i256 loc(#loc33)
// CHECK-NEXT:     %27 = llvm.inttoptr %c64_i256_9 : i256 to !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc33)
// CHECK-NEXT:     %c32_i256_10 = arith.constant 32 : i256 loc(#loc33)
// CHECK-NEXT:     %29 = arith.addi %28, %c32_i256_10 : i256 loc(#loc33)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:     %30 = arith.addi %28, %c0_i256_11 : i256 loc(#loc33)
// CHECK-NEXT:     %31 = llvm.inttoptr %30 : i256 to !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     llvm.store %26, %31 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     %32 = arith.subi %29, %28 : i256 loc(#loc33)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %33 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %33 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %34 = arith.cmpi ule, %28, %c4294967295_i256 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %34 {
// CHECK-NEXT:       llvm.store %28, %33 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %35 = llvm.load %33 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256_12 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64_13 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %36 = llvm.alloca %c1_i64_13 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256_12, %36 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %37 = arith.cmpi ule, %32, %c4294967295_i256_12 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %37 {
// CHECK-NEXT:       llvm.store %32, %36 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %38 = llvm.load %36 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %39 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256_14 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64_15 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %40 = llvm.alloca %c1_i64_15 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256_14, %40 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %41 = arith.cmpi ule, %39, %c4294967295_i256_14 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %41 {
// CHECK-NEXT:       llvm.store %39, %40 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %42 = llvm.load %40 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %c64_i256_16 = arith.constant 64 : i256 loc(#loc33)
// CHECK-NEXT:     %43 = arith.shli %35, %c64_i256_16 : i256 loc(#loc33)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc33)
// CHECK-NEXT:     %44 = arith.shli %38, %c96_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc33)
// CHECK-NEXT:     %45 = arith.shli %42, %c192_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %46 = arith.addi %43, %44 : i256 loc(#loc33)
// CHECK-NEXT:     %47 = arith.addi %46, %45 : i256 loc(#loc33)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc33)
// CHECK-NEXT:     %48 = arith.addi %47, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc33)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc33)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %54 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %55:2 = call @__farcall(%48, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %24, %25, %49, %50, %51, %52, %53, %54) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc33)
// CHECK-NEXT:     %false_17 = arith.constant false loc(#loc33)
// CHECK-NEXT:     %56 = arith.cmpi eq, %55#1, %false_17 : i1 loc(#loc33)
// CHECK-NEXT:     scf.if %56 {
// CHECK-NEXT:       %c0_i256_18 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:       %c2_i256_20 = arith.constant 2 : i256 loc(#loc33)
// CHECK-NEXT:       func.call @__revert(%c0_i256_18, %c0_i256_19, %c2_i256_20) : (i256, i256, i256) -> () loc(#loc33)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     return loc(#loc16)
// CHECK-NEXT:   } loc(#loc16)
// CHECK-NEXT:   func.func @_mint_302.0(%arg0: i256 loc({{.*}}:105:17), %arg1: i256 loc({{.*}}:105:34)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc35)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc36)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %c2_i256_1 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %3 = llvm.inttoptr %c2_i256_1 : i256 to !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc38)
// CHECK-NEXT:     %5 = arith.addi %4, %2 : i256 loc(#loc38)
// CHECK-NEXT:     %6 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     llvm.store %5, %6 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc39)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc40)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc40)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %c0_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc40)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc40)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc41)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %13 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc39)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc40)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %13, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc40)
// CHECK-NEXT:     %15 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %c0_i256_3, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc40)
// CHECK-NEXT:     %16 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %17 = call @__sha3(%16, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc40)
// CHECK-NEXT:     %18 = llvm.inttoptr %17 : i256 to !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc40)
// CHECK-NEXT:     %20 = arith.addi %19, %12 : i256 loc(#loc40)
// CHECK-NEXT:     %21 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     llvm.store %20, %21 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc42)
// CHECK-NEXT:     %22 = arith.extui %c0_i8 : i8 to i256 loc(#loc42)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc43)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %25 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc45)
// CHECK-NEXT:     %c32_i256_9 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %27 = arith.addi %26, %c32_i256_9 : i256 loc(#loc45)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:     %28 = arith.addi %26, %c0_i256_10 : i256 loc(#loc45)
// CHECK-NEXT:     %29 = llvm.inttoptr %28 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     llvm.store %24, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %30 = arith.subi %27, %26 : i256 loc(#loc45)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %31 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %32 = arith.cmpi ule, %26, %c4294967295_i256 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %32 {
// CHECK-NEXT:       llvm.store %26, %31 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %33 = llvm.load %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_11 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_12 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %34 = llvm.alloca %c1_i64_12 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_11, %34 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %35 = arith.cmpi ule, %30, %c4294967295_i256_11 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %35 {
// CHECK-NEXT:       llvm.store %30, %34 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %36 = llvm.load %34 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %37 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %38 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %39 = arith.cmpi ule, %37, %c4294967295_i256_13 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %39 {
// CHECK-NEXT:       llvm.store %37, %38 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %40 = llvm.load %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c64_i256_15 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %41 = arith.shli %33, %c64_i256_15 : i256 loc(#loc45)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc45)
// CHECK-NEXT:     %42 = arith.shli %36, %c96_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc45)
// CHECK-NEXT:     %43 = arith.shli %40, %c192_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %44 = arith.addi %41, %42 : i256 loc(#loc45)
// CHECK-NEXT:     %45 = arith.addi %44, %43 : i256 loc(#loc45)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc45)
// CHECK-NEXT:     %46 = arith.addi %45, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc45)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc45)
// CHECK-NEXT:     %47 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %48 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %53:2 = call @__farcall(%46, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %22, %23, %47, %48, %49, %50, %51, %52) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc45)
// CHECK-NEXT:     %false_16 = arith.constant false loc(#loc45)
// CHECK-NEXT:     %54 = arith.cmpi eq, %53#1, %false_16 : i1 loc(#loc45)
// CHECK-NEXT:     scf.if %54 {
// CHECK-NEXT:       %c0_i256_17 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_18 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c2_i256_19 = arith.constant 2 : i256 loc(#loc45)
// CHECK-NEXT:       func.call @__revert(%c0_i256_17, %c0_i256_18, %c2_i256_19) : (i256, i256, i256) -> () loc(#loc45)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     return loc(#loc34)
// CHECK-NEXT:   } loc(#loc34)
// CHECK-NEXT:   func.func @_transfer_274.0(%arg0: i256 loc({{.*}}:89:21), %arg1: i256 loc({{.*}}:89:37), %arg2: i256 loc({{.*}}:89:56)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc49)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc50)
// CHECK-NEXT:     %3 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %4 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc51)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc52)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc52)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     llvm.store %c0_i256, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc52)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc52)
// CHECK-NEXT:     %9 = llvm.inttoptr %8 : i256 to !llvm.ptr<5> loc(#loc52)
// CHECK-NEXT:     %10 = llvm.load %9 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc52)
// CHECK-NEXT:     llvm.store %10, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc53)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc54)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %c32_i256_6 = arith.constant 32 : i256 loc(#loc54)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256_6 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     llvm.store %c0_i256_4, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc54)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256_7, %false_8) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc54)
// CHECK-NEXT:     %16 = llvm.load %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc55)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %18 = arith.subi %16, %17 : i256 loc(#loc55)
// CHECK-NEXT:     %19 = llvm.inttoptr %15 : i256 to !llvm.ptr<5> loc(#loc54)
// CHECK-NEXT:     llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc54)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %20 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc57)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc58)
// CHECK-NEXT:     %21 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %20, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc58)
// CHECK-NEXT:     %22 = llvm.inttoptr %c32_i256_11 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %c0_i256_9, %22 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c64_i256_12 = arith.constant 64 : i256 loc(#loc58)
// CHECK-NEXT:     %23 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %false_13 = arith.constant false loc(#loc)
// CHECK-NEXT:     %24 = call @__sha3(%23, %c64_i256_12, %false_13) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc58)
// CHECK-NEXT:     %25 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %26 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc57)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc58)
// CHECK-NEXT:     %27 = llvm.inttoptr %c0_i256_15 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %26, %27 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c32_i256_16 = arith.constant 32 : i256 loc(#loc58)
// CHECK-NEXT:     %28 = llvm.inttoptr %c32_i256_16 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %c0_i256_14, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc58)
// CHECK-NEXT:     %29 = llvm.inttoptr %c0_i256_15 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc)
// CHECK-NEXT:     %30 = call @__sha3(%29, %c64_i256_17, %false_18) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc58)
// CHECK-NEXT:     %31 = llvm.inttoptr %30 : i256 to !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     %32 = llvm.load %31 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc58)
// CHECK-NEXT:     %33 = arith.addi %32, %25 : i256 loc(#loc58)
// CHECK-NEXT:     %34 = llvm.inttoptr %24 : i256 to !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     llvm.store %33, %34 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     %35 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %36 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc61)
// CHECK-NEXT:     %37 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %c64_i256_19 = arith.constant 64 : i256 loc(#loc63)
// CHECK-NEXT:     %38 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     %39 = llvm.load %38 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc63)
// CHECK-NEXT:     %c32_i256_20 = arith.constant 32 : i256 loc(#loc63)
// CHECK-NEXT:     %40 = arith.addi %39, %c32_i256_20 : i256 loc(#loc63)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:     %41 = arith.addi %39, %c0_i256_21 : i256 loc(#loc63)
// CHECK-NEXT:     %42 = llvm.inttoptr %41 : i256 to !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     llvm.store %37, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     %43 = arith.subi %40, %39 : i256 loc(#loc63)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %44 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %45 = arith.cmpi ule, %39, %c4294967295_i256 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       llvm.store %39, %44 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %46 = llvm.load %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256_22 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64_23 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %47 = llvm.alloca %c1_i64_23 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256_22, %47 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %48 = arith.cmpi ule, %43, %c4294967295_i256_22 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %48 {
// CHECK-NEXT:       llvm.store %43, %47 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %49 = llvm.load %47 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %50 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256_24 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64_25 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %51 = llvm.alloca %c1_i64_25 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256_24, %51 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %52 = arith.cmpi ule, %50, %c4294967295_i256_24 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %52 {
// CHECK-NEXT:       llvm.store %50, %51 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %53 = llvm.load %51 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c64_i256_26 = arith.constant 64 : i256 loc(#loc63)
// CHECK-NEXT:     %54 = arith.shli %46, %c64_i256_26 : i256 loc(#loc63)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc63)
// CHECK-NEXT:     %55 = arith.shli %49, %c96_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc63)
// CHECK-NEXT:     %56 = arith.shli %53, %c192_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %57 = arith.addi %54, %55 : i256 loc(#loc63)
// CHECK-NEXT:     %58 = arith.addi %57, %56 : i256 loc(#loc63)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc63)
// CHECK-NEXT:     %59 = arith.addi %58, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc63)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc63)
// CHECK-NEXT:     %60 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %61 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %62 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %63 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %64 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %65 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %66:2 = call @__farcall(%59, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %35, %36, %60, %61, %62, %63, %64, %65) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc63)
// CHECK-NEXT:     %false_27 = arith.constant false loc(#loc63)
// CHECK-NEXT:     %67 = arith.cmpi eq, %66#1, %false_27 : i1 loc(#loc63)
// CHECK-NEXT:     scf.if %67 {
// CHECK-NEXT:       %c0_i256_28 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:       %c0_i256_29 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc63)
// CHECK-NEXT:       func.call @__revert(%c0_i256_28, %c0_i256_29, %c2_i256) : (i256, i256, i256) -> () loc(#loc63)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @decreaseAllowance_237.0(%arg0: i256 loc({{.*}}:77:29), %arg1: i256 loc({{.*}}:77:46)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc65)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc66)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc66)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc66)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc67)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %3 = call @_msgSender_42.0() : () -> i256 loc(#loc68)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc69)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc69)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc69)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc69)
// CHECK-NEXT:     %8 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc70)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc69)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc69)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc69)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc69)
// CHECK-NEXT:     %13 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc69)
// CHECK-NEXT:     %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc69)
// CHECK-NEXT:     llvm.store %14, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     %15 = call @_msgSender_42.0() : () -> i256 loc(#loc71)
// CHECK-NEXT:     %16 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc72)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc73)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc74)
// CHECK-NEXT:     %19 = arith.subi %17, %18 : i256 loc(#loc73)
// CHECK-NEXT:     call @_approve_362(%15, %16, %19) : (i256, i256, i256) -> () loc(#loc75)
// CHECK-NEXT:     %true = arith.constant true loc(#loc76)
// CHECK-NEXT:     return %true : i1 loc(#loc77)
// CHECK-NEXT:   } loc(#loc64)
// CHECK-NEXT:   func.func @increaseAllowance_206.0(%arg0: i256 loc({{.*}}:68:29), %arg1: i256 loc({{.*}}:68:46)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc79)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc80)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     %2 = call @_msgSender_42.0() : () -> i256 loc(#loc81)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc82)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %4 = call @_msgSender_42.0() : () -> i256 loc(#loc83)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc84)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc84)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %c1_i256_1, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc84)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc84)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc85)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc84)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc84)
// CHECK-NEXT:     %11 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %8, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc84)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc)
// CHECK-NEXT:     %13 = call @__sha3(%12, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc84)
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<5> loc(#loc84)
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc84)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc86)
// CHECK-NEXT:     %17 = arith.addi %15, %16 : i256 loc(#loc84)
// CHECK-NEXT:     call @_approve_362(%2, %3, %17) : (i256, i256, i256) -> () loc(#loc87)
// CHECK-NEXT:     %true = arith.constant true loc(#loc88)
// CHECK-NEXT:     return %true : i1 loc(#loc89)
// CHECK-NEXT:   } loc(#loc78)
// CHECK-NEXT:   func.func @transferFrom_179.0(%arg0: i256 loc({{.*}}:54:24), %arg1: i256 loc({{.*}}:54:40), %arg2: i256 loc({{.*}}:54:59)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc91)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc92)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc92)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc92)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc93)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc93)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc93)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc94)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc95)
// CHECK-NEXT:     %5 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc96)
// CHECK-NEXT:     call @_transfer_274(%3, %4, %5) : (i256, i256, i256) -> () loc(#loc97)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc98)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc98)
// CHECK-NEXT:     %c1_i256_3 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc99)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc100)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc100)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %c1_i256_3, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc100)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc100)
// CHECK-NEXT:     %12 = call @_msgSender_42.0() : () -> i256 loc(#loc101)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc100)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc100)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %11, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc100)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc100)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc100)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc100)
// CHECK-NEXT:     llvm.store %18, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc98)
// CHECK-NEXT:     %19 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc102)
// CHECK-NEXT:     %20 = call @_msgSender_42.0() : () -> i256 loc(#loc103)
// CHECK-NEXT:     %21 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc104)
// CHECK-NEXT:     %22 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc105)
// CHECK-NEXT:     %23 = arith.subi %21, %22 : i256 loc(#loc104)
// CHECK-NEXT:     call @_approve_362(%19, %20, %23) : (i256, i256, i256) -> () loc(#loc106)
// CHECK-NEXT:     %true = arith.constant true loc(#loc107)
// CHECK-NEXT:     return %true : i1 loc(#loc108)
// CHECK-NEXT:   } loc(#loc90)
// CHECK-NEXT:   func.func @approve_140.0(%arg0: i256 loc({{.*}}:49:19), %arg1: i256 loc({{.*}}:49:36)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc110)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc110)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc110)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc111)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc111)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc111)
// CHECK-NEXT:     %2 = call @_msgSender_42.0() : () -> i256 loc(#loc112)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc113)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc114)
// CHECK-NEXT:     call @_approve_362(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc115)
// CHECK-NEXT:     %true = arith.constant true loc(#loc116)
// CHECK-NEXT:     return %true : i1 loc(#loc117)
// CHECK-NEXT:   } loc(#loc109)
// CHECK-NEXT:   func.func @allowance_121.0(%arg0: i256 loc({{.*}}:45:21), %arg1: i256 loc({{.*}}:45:36)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc119)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc120)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc121)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc122)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc122)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %c1_i256_1, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc122)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc122)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc123)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc122)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc122)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc122)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc122)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc122)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc122)
// CHECK-NEXT:     return %13 : i256 loc(#loc124)
// CHECK-NEXT:   } loc(#loc118)
// CHECK-NEXT:   func.func @transfer_105.0(%arg0: i256 loc({{.*}}:40:20), %arg1: i256 loc({{.*}}:40:39)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc126)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc127)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc127)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc127)
// CHECK-NEXT:     %2 = call @_msgSender_42.0() : () -> i256 loc(#loc128)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc129)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc130)
// CHECK-NEXT:     call @_transfer_274(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc131)
// CHECK-NEXT:     %true = arith.constant true loc(#loc132)
// CHECK-NEXT:     return %true : i1 loc(#loc133)
// CHECK-NEXT:   } loc(#loc125)
// CHECK-NEXT:   func.func @balanceOf_86.0(%arg0: i256 loc({{.*}}:36:21)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc135)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc136)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc137)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc137)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     llvm.store %c0_i256, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc137)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc137)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc137)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc137)
// CHECK-NEXT:     return %7 : i256 loc(#loc138)
// CHECK-NEXT:   } loc(#loc134)
// CHECK-NEXT:   func.func @totalSupply_74.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %0 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc140)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc140)
// CHECK-NEXT:     return %1 : i256 loc(#loc141)
// CHECK-NEXT:   } loc(#loc139)
// CHECK-NEXT:   func.func @decimals_66.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c18_i8 = arith.constant 18 : i8 loc(#loc143)
// CHECK-NEXT:     %0 = arith.extui %c18_i8 : i8 to i256 loc(#loc143)
// CHECK-NEXT:     return %0 : i256 loc(#loc144)
// CHECK-NEXT:   } loc(#loc142)
// CHECK-NEXT:   func.func @symbol_58.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc146)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %c4_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc146)
// CHECK-NEXT:     %3 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<5> loc(#loc146)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc146)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc146)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc146)
// CHECK-NEXT:     %6 = arith.andi %5, %c4294967264_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc146)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc146)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc146)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc146)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc146)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc146)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc146)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc146)
// CHECK-NEXT:       %19 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       %c4_i256_5 = arith.constant 4 : i256 loc(#loc146)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc146)
// CHECK-NEXT:       %20 = llvm.inttoptr %c4_i256_5 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %c65_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc146)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc146)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc146)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc146)
// CHECK-NEXT:     } loc(#loc146)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc146)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %c31_i256_2 = arith.constant 31 : i256 loc(#loc146)
// CHECK-NEXT:     %16 = arith.addi %4, %c31_i256_2 : i256 loc(#loc146)
// CHECK-NEXT:     %c4294967264_i256_3 = arith.constant 4294967264 : i256 loc(#loc146)
// CHECK-NEXT:     %17 = arith.andi %16, %c4294967264_i256_3 : i256 loc(#loc146)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc146)
// CHECK-NEXT:     %18 = arith.index_castui %17 : i256 to index loc(#loc146)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc146)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %18 step %c1 {
// CHECK-NEXT:       %19 = arith.index_castui %arg0 : index to i256 loc(#loc146)
// CHECK-NEXT:       %20 = arith.addi %2, %19 : i256 loc(#loc146)
// CHECK-NEXT:       %21 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc146)
// CHECK-NEXT:       %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc146)
// CHECK-NEXT:       %c32_i256_4 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:       %23 = arith.muli %19, %c32_i256_4 : i256 loc(#loc146)
// CHECK-NEXT:       %24 = arith.addi %9, %23 : i256 loc(#loc146)
// CHECK-NEXT:       %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %22, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     } loc(#loc146)
// CHECK-NEXT:     return %9 : i256 loc(#loc147)
// CHECK-NEXT:   } loc(#loc145)
// CHECK-NEXT:   func.func @name_50.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c4294967264_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %19 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c2_i256 = arith.constant 2 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c2_i256) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c31_i256_2 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %4, %c31_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c4294967264_i256_3 = arith.constant 4294967264 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.andi %16, %c4294967264_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %18 = arith.index_castui %17 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %18 step %c1 {
// CHECK-NEXT:       %19 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %20 = arith.addi %2, %19 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_4 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %23 = arith.muli %19, %c32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.addi %9, %23 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %22, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc149)
// CHECK-NEXT:   } loc(#loc148)
// CHECK-NEXT:   func.func @_msgSender_42.0() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %0 = "llvm.intrcall"() <{id = 3170 : i32, name = "eravm.caller"}> : () -> i256 loc(#loc151)
// CHECK-NEXT:     return %0 : i256 loc(#loc152)
// CHECK-NEXT:   } loc(#loc150)
// CHECK-NEXT:   func.func @_msgSender_42() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %0 = "llvm.intrcall"() <{id = 3170 : i32, name = "eravm.caller"}> : () -> i256 loc(#loc151)
// CHECK-NEXT:     return %0 : i256 loc(#loc152)
// CHECK-NEXT:   } loc(#loc150)
// CHECK-NEXT:   func.func @name_50() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %c3_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc1)
// CHECK-NEXT:     %3 = llvm.inttoptr %c3_i256 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc1)
// CHECK-NEXT:     %6 = arith.andi %5, %c4294967264_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc1)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc1)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc1)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc1)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc1)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc1)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc1)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc1)
// CHECK-NEXT:       %19 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c4_i256 = arith.constant 4 : i256 loc(#loc1)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc1)
// CHECK-NEXT:       %20 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %c65_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       %c0_i256_5 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc1)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc1)
// CHECK-NEXT:       func.call @__revert(%c0_i256_5, %c24_i256, %c0_i256_6) : (i256, i256, i256) -> () loc(#loc1)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc1)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     %c31_i256_2 = arith.constant 31 : i256 loc(#loc1)
// CHECK-NEXT:     %16 = arith.addi %4, %c31_i256_2 : i256 loc(#loc1)
// CHECK-NEXT:     %c4294967264_i256_3 = arith.constant 4294967264 : i256 loc(#loc1)
// CHECK-NEXT:     %17 = arith.andi %16, %c4294967264_i256_3 : i256 loc(#loc1)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc1)
// CHECK-NEXT:     %18 = arith.index_castui %17 : i256 to index loc(#loc1)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc1)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %18 step %c1 {
// CHECK-NEXT:       %19 = arith.index_castui %arg0 : index to i256 loc(#loc1)
// CHECK-NEXT:       %20 = arith.addi %2, %19 : i256 loc(#loc1)
// CHECK-NEXT:       %21 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc1)
// CHECK-NEXT:       %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc1)
// CHECK-NEXT:       %c32_i256_4 = arith.constant 32 : i256 loc(#loc1)
// CHECK-NEXT:       %23 = arith.muli %19, %c32_i256_4 : i256 loc(#loc1)
// CHECK-NEXT:       %24 = arith.addi %9, %23 : i256 loc(#loc1)
// CHECK-NEXT:       %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:       llvm.store %22, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc1)
// CHECK-NEXT:     } loc(#loc1)
// CHECK-NEXT:     return %9 : i256 loc(#loc149)
// CHECK-NEXT:   } loc(#loc148)
// CHECK-NEXT:   func.func @symbol_58() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c4_i256 = arith.constant 4 : i256 loc(#loc146)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:     %0 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %c4_i256, %0 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:     %1 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %2 = call @__sha3(%1, %c32_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc146)
// CHECK-NEXT:     %3 = llvm.inttoptr %c4_i256 : i256 to !llvm.ptr<5> loc(#loc146)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc146)
// CHECK-NEXT:     %c31_i256 = arith.constant 31 : i256 loc(#loc146)
// CHECK-NEXT:     %5 = arith.addi %4, %c31_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %c4294967264_i256 = arith.constant 4294967264 : i256 loc(#loc146)
// CHECK-NEXT:     %6 = arith.andi %5, %c4294967264_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %c32_i256_0 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:     %7 = arith.addi %6, %c32_i256_0 : i256 loc(#loc146)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc146)
// CHECK-NEXT:     %8 = llvm.inttoptr %c64_i256 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc146)
// CHECK-NEXT:     %10 = arith.addi %9, %7 : i256 loc(#loc146)
// CHECK-NEXT:     %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256 loc(#loc146)
// CHECK-NEXT:     %11 = arith.cmpi ugt, %10, %c18446744073709551615_i256 : i256 loc(#loc146)
// CHECK-NEXT:     %12 = arith.cmpi ult, %10, %9 : i256 loc(#loc146)
// CHECK-NEXT:     %13 = arith.ori %11, %12 : i1 loc(#loc146)
// CHECK-NEXT:     scf.if %13 {
// CHECK-NEXT:       %c0_i256_4 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:       %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256 = arith.constant 35408467139433450592217433187231851964531694900788300625387963629091585785856 : i256 loc(#loc146)
// CHECK-NEXT:       %19 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %c35408467139433450592217433187231851964531694900788300625387963629091585785856_i256, %19 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       %c4_i256_5 = arith.constant 4 : i256 loc(#loc146)
// CHECK-NEXT:       %c65_i256 = arith.constant 65 : i256 loc(#loc146)
// CHECK-NEXT:       %20 = llvm.inttoptr %c4_i256_5 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %c65_i256, %20 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:       %c24_i256 = arith.constant 24 : i256 loc(#loc146)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc146)
// CHECK-NEXT:       func.call @__revert(%c0_i256_6, %c24_i256, %c0_i256_7) : (i256, i256, i256) -> () loc(#loc146)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc146)
// CHECK-NEXT:     } loc(#loc146)
// CHECK-NEXT:     %c64_i256_1 = arith.constant 64 : i256 loc(#loc146)
// CHECK-NEXT:     %14 = llvm.inttoptr %c64_i256_1 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %10, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %15 = llvm.inttoptr %9 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     llvm.store %4, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     %c31_i256_2 = arith.constant 31 : i256 loc(#loc146)
// CHECK-NEXT:     %16 = arith.addi %4, %c31_i256_2 : i256 loc(#loc146)
// CHECK-NEXT:     %c4294967264_i256_3 = arith.constant 4294967264 : i256 loc(#loc146)
// CHECK-NEXT:     %17 = arith.andi %16, %c4294967264_i256_3 : i256 loc(#loc146)
// CHECK-NEXT:     %c0 = arith.constant 0 : index loc(#loc146)
// CHECK-NEXT:     %18 = arith.index_castui %17 : i256 to index loc(#loc146)
// CHECK-NEXT:     %c1 = arith.constant 1 : index loc(#loc146)
// CHECK-NEXT:     scf.for %arg0 = %c0 to %18 step %c1 {
// CHECK-NEXT:       %19 = arith.index_castui %arg0 : index to i256 loc(#loc146)
// CHECK-NEXT:       %20 = arith.addi %2, %19 : i256 loc(#loc146)
// CHECK-NEXT:       %21 = llvm.inttoptr %20 : i256 to !llvm.ptr<5> loc(#loc146)
// CHECK-NEXT:       %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc146)
// CHECK-NEXT:       %c32_i256_4 = arith.constant 32 : i256 loc(#loc146)
// CHECK-NEXT:       %23 = arith.muli %19, %c32_i256_4 : i256 loc(#loc146)
// CHECK-NEXT:       %24 = arith.addi %9, %23 : i256 loc(#loc146)
// CHECK-NEXT:       %25 = llvm.inttoptr %24 : i256 to !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:       llvm.store %22, %25 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc146)
// CHECK-NEXT:     } loc(#loc146)
// CHECK-NEXT:     return %9 : i256 loc(#loc147)
// CHECK-NEXT:   } loc(#loc145)
// CHECK-NEXT:   func.func @decimals_66() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c18_i8 = arith.constant 18 : i8 loc(#loc143)
// CHECK-NEXT:     %0 = arith.extui %c18_i8 : i8 to i256 loc(#loc143)
// CHECK-NEXT:     return %0 : i256 loc(#loc144)
// CHECK-NEXT:   } loc(#loc142)
// CHECK-NEXT:   func.func @totalSupply_74() -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %0 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc140)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc140)
// CHECK-NEXT:     return %1 : i256 loc(#loc141)
// CHECK-NEXT:   } loc(#loc139)
// CHECK-NEXT:   func.func @balanceOf_86(%arg0: i256 loc({{.*}}:36:21)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc135)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc135)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %1 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc136)
// CHECK-NEXT:     %c0_i256_0 = arith.constant 0 : i256 loc(#loc137)
// CHECK-NEXT:     %2 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     llvm.store %1, %2 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc137)
// CHECK-NEXT:     %3 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     llvm.store %c0_i256, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc137)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_0 : i256 to !llvm.ptr<1> loc(#loc137)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %5 = call @__sha3(%4, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc137)
// CHECK-NEXT:     %6 = llvm.inttoptr %5 : i256 to !llvm.ptr<5> loc(#loc137)
// CHECK-NEXT:     %7 = llvm.load %6 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc137)
// CHECK-NEXT:     return %7 : i256 loc(#loc138)
// CHECK-NEXT:   } loc(#loc134)
// CHECK-NEXT:   func.func @transfer_105(%arg0: i256 loc({{.*}}:40:20), %arg1: i256 loc({{.*}}:40:39)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc126)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc126)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc127)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc127)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc127)
// CHECK-NEXT:     %2 = call @_msgSender_42() : () -> i256 loc(#loc128)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc129)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc130)
// CHECK-NEXT:     call @_transfer_274(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc131)
// CHECK-NEXT:     %true = arith.constant true loc(#loc132)
// CHECK-NEXT:     return %true : i1 loc(#loc133)
// CHECK-NEXT:   } loc(#loc125)
// CHECK-NEXT:   func.func @allowance_121(%arg0: i256 loc({{.*}}:45:21), %arg1: i256 loc({{.*}}:45:36)) -> i256 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc119)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc119)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc120)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc120)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %2 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc121)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc122)
// CHECK-NEXT:     %3 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %2, %3 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc122)
// CHECK-NEXT:     %4 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %c1_i256_1, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc122)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %6 = call @__sha3(%5, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc122)
// CHECK-NEXT:     %7 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc123)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc122)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc122)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     llvm.store %6, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc122)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc122)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc122)
// CHECK-NEXT:     %12 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc122)
// CHECK-NEXT:     %13 = llvm.load %12 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc122)
// CHECK-NEXT:     return %13 : i256 loc(#loc124)
// CHECK-NEXT:   } loc(#loc118)
// CHECK-NEXT:   func.func @approve_140(%arg0: i256 loc({{.*}}:49:19), %arg1: i256 loc({{.*}}:49:36)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc110)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc110)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc110)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc111)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc111)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc111)
// CHECK-NEXT:     %2 = call @_msgSender_42() : () -> i256 loc(#loc112)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc113)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc114)
// CHECK-NEXT:     call @_approve_362(%2, %3, %4) : (i256, i256, i256) -> () loc(#loc115)
// CHECK-NEXT:     %true = arith.constant true loc(#loc116)
// CHECK-NEXT:     return %true : i1 loc(#loc117)
// CHECK-NEXT:   } loc(#loc109)
// CHECK-NEXT:   func.func @transferFrom_179(%arg0: i256 loc({{.*}}:54:24), %arg1: i256 loc({{.*}}:54:40), %arg2: i256 loc({{.*}}:54:59)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc91)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc91)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc92)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc92)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc92)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc93)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc93)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc93)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc94)
// CHECK-NEXT:     %4 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc95)
// CHECK-NEXT:     %5 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc96)
// CHECK-NEXT:     call @_transfer_274(%3, %4, %5) : (i256, i256, i256) -> () loc(#loc97)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc98)
// CHECK-NEXT:     %6 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc98)
// CHECK-NEXT:     %c1_i256_3 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc99)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc100)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc100)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %c1_i256_3, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc100)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc100)
// CHECK-NEXT:     %12 = call @_msgSender_42() : () -> i256 loc(#loc101)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc100)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %12, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc100)
// CHECK-NEXT:     %14 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     llvm.store %11, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc100)
// CHECK-NEXT:     %15 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc100)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %16 = call @__sha3(%15, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc100)
// CHECK-NEXT:     %17 = llvm.inttoptr %16 : i256 to !llvm.ptr<5> loc(#loc100)
// CHECK-NEXT:     %18 = llvm.load %17 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc100)
// CHECK-NEXT:     llvm.store %18, %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc98)
// CHECK-NEXT:     %19 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc102)
// CHECK-NEXT:     %20 = call @_msgSender_42() : () -> i256 loc(#loc103)
// CHECK-NEXT:     %21 = llvm.load %6 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc104)
// CHECK-NEXT:     %22 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc105)
// CHECK-NEXT:     %23 = arith.subi %21, %22 : i256 loc(#loc104)
// CHECK-NEXT:     call @_approve_362(%19, %20, %23) : (i256, i256, i256) -> () loc(#loc106)
// CHECK-NEXT:     %true = arith.constant true loc(#loc107)
// CHECK-NEXT:     return %true : i1 loc(#loc108)
// CHECK-NEXT:   } loc(#loc90)
// CHECK-NEXT:   func.func @increaseAllowance_206(%arg0: i256 loc({{.*}}:68:29), %arg1: i256 loc({{.*}}:68:46)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc79)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc79)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc80)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc80)
// CHECK-NEXT:     %2 = call @_msgSender_42() : () -> i256 loc(#loc81)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc82)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %4 = call @_msgSender_42() : () -> i256 loc(#loc83)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc84)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc84)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %c1_i256_1, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc84)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc84)
// CHECK-NEXT:     %9 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc85)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc84)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %9, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c32_i256_3 = arith.constant 32 : i256 loc(#loc84)
// CHECK-NEXT:     %11 = llvm.inttoptr %c32_i256_3 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     llvm.store %8, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %c64_i256_4 = arith.constant 64 : i256 loc(#loc84)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc84)
// CHECK-NEXT:     %false_5 = arith.constant false loc(#loc)
// CHECK-NEXT:     %13 = call @__sha3(%12, %c64_i256_4, %false_5) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc84)
// CHECK-NEXT:     %14 = llvm.inttoptr %13 : i256 to !llvm.ptr<5> loc(#loc84)
// CHECK-NEXT:     %15 = llvm.load %14 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc84)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc86)
// CHECK-NEXT:     %17 = arith.addi %15, %16 : i256 loc(#loc84)
// CHECK-NEXT:     call @_approve_362(%2, %3, %17) : (i256, i256, i256) -> () loc(#loc87)
// CHECK-NEXT:     %true = arith.constant true loc(#loc88)
// CHECK-NEXT:     return %true : i1 loc(#loc89)
// CHECK-NEXT:   } loc(#loc78)
// CHECK-NEXT:   func.func @decreaseAllowance_237(%arg0: i256 loc({{.*}}:77:29), %arg1: i256 loc({{.*}}:77:46)) -> i1 attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc65)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc65)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc66)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc66)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc66)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc67)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %3 = call @_msgSender_42() : () -> i256 loc(#loc68)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc69)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc69)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc69)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc69)
// CHECK-NEXT:     %8 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc70)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc69)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc69)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc69)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc69)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc69)
// CHECK-NEXT:     %13 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc69)
// CHECK-NEXT:     %14 = llvm.load %13 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc69)
// CHECK-NEXT:     llvm.store %14, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc67)
// CHECK-NEXT:     %15 = call @_msgSender_42() : () -> i256 loc(#loc71)
// CHECK-NEXT:     %16 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc72)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc73)
// CHECK-NEXT:     %18 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc74)
// CHECK-NEXT:     %19 = arith.subi %17, %18 : i256 loc(#loc73)
// CHECK-NEXT:     call @_approve_362(%15, %16, %19) : (i256, i256, i256) -> () loc(#loc75)
// CHECK-NEXT:     %true = arith.constant true loc(#loc76)
// CHECK-NEXT:     return %true : i1 loc(#loc77)
// CHECK-NEXT:   } loc(#loc64)
// CHECK-NEXT:   func.func @_transfer_274(%arg0: i256 loc({{.*}}:89:21), %arg1: i256 loc({{.*}}:89:37), %arg2: i256 loc({{.*}}:89:56)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc47)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc47)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc48)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc48)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc49)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc49)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc50)
// CHECK-NEXT:     %3 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %4 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc51)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc52)
// CHECK-NEXT:     %5 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     llvm.store %4, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc52)
// CHECK-NEXT:     %6 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     llvm.store %c0_i256, %6 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc52)
// CHECK-NEXT:     %7 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc52)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %8 = call @__sha3(%7, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc52)
// CHECK-NEXT:     %9 = llvm.inttoptr %8 : i256 to !llvm.ptr<5> loc(#loc52)
// CHECK-NEXT:     %10 = llvm.load %9 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc52)
// CHECK-NEXT:     llvm.store %10, %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc53)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc54)
// CHECK-NEXT:     %12 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %c32_i256_6 = arith.constant 32 : i256 loc(#loc54)
// CHECK-NEXT:     %13 = llvm.inttoptr %c32_i256_6 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     llvm.store %c0_i256_4, %13 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc54)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_5 : i256 to !llvm.ptr<1> loc(#loc54)
// CHECK-NEXT:     %false_8 = arith.constant false loc(#loc)
// CHECK-NEXT:     %15 = call @__sha3(%14, %c64_i256_7, %false_8) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc54)
// CHECK-NEXT:     %16 = llvm.load %3 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc55)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc56)
// CHECK-NEXT:     %18 = arith.subi %16, %17 : i256 loc(#loc55)
// CHECK-NEXT:     %19 = llvm.inttoptr %15 : i256 to !llvm.ptr<5> loc(#loc54)
// CHECK-NEXT:     llvm.store %18, %19 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc54)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %20 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc57)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc58)
// CHECK-NEXT:     %21 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %20, %21 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c32_i256_11 = arith.constant 32 : i256 loc(#loc58)
// CHECK-NEXT:     %22 = llvm.inttoptr %c32_i256_11 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %c0_i256_9, %22 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c64_i256_12 = arith.constant 64 : i256 loc(#loc58)
// CHECK-NEXT:     %23 = llvm.inttoptr %c0_i256_10 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %false_13 = arith.constant false loc(#loc)
// CHECK-NEXT:     %24 = call @__sha3(%23, %c64_i256_12, %false_13) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc58)
// CHECK-NEXT:     %25 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc59)
// CHECK-NEXT:     %c0_i256_14 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %26 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc57)
// CHECK-NEXT:     %c0_i256_15 = arith.constant 0 : i256 loc(#loc58)
// CHECK-NEXT:     %27 = llvm.inttoptr %c0_i256_15 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %26, %27 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c32_i256_16 = arith.constant 32 : i256 loc(#loc58)
// CHECK-NEXT:     %28 = llvm.inttoptr %c32_i256_16 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     llvm.store %c0_i256_14, %28 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %c64_i256_17 = arith.constant 64 : i256 loc(#loc58)
// CHECK-NEXT:     %29 = llvm.inttoptr %c0_i256_15 : i256 to !llvm.ptr<1> loc(#loc58)
// CHECK-NEXT:     %false_18 = arith.constant false loc(#loc)
// CHECK-NEXT:     %30 = call @__sha3(%29, %c64_i256_17, %false_18) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc58)
// CHECK-NEXT:     %31 = llvm.inttoptr %30 : i256 to !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     %32 = llvm.load %31 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc58)
// CHECK-NEXT:     %33 = arith.addi %32, %25 : i256 loc(#loc58)
// CHECK-NEXT:     %34 = llvm.inttoptr %24 : i256 to !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     llvm.store %33, %34 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc58)
// CHECK-NEXT:     %35 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc60)
// CHECK-NEXT:     %36 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc61)
// CHECK-NEXT:     %37 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc62)
// CHECK-NEXT:     %c64_i256_19 = arith.constant 64 : i256 loc(#loc63)
// CHECK-NEXT:     %38 = llvm.inttoptr %c64_i256_19 : i256 to !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     %39 = llvm.load %38 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc63)
// CHECK-NEXT:     %c32_i256_20 = arith.constant 32 : i256 loc(#loc63)
// CHECK-NEXT:     %40 = arith.addi %39, %c32_i256_20 : i256 loc(#loc63)
// CHECK-NEXT:     %c0_i256_21 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:     %41 = arith.addi %39, %c0_i256_21 : i256 loc(#loc63)
// CHECK-NEXT:     %42 = llvm.inttoptr %41 : i256 to !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     llvm.store %37, %42 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc63)
// CHECK-NEXT:     %43 = arith.subi %40, %39 : i256 loc(#loc63)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %44 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %45 = arith.cmpi ule, %39, %c4294967295_i256 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %45 {
// CHECK-NEXT:       llvm.store %39, %44 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %46 = llvm.load %44 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256_22 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64_23 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %47 = llvm.alloca %c1_i64_23 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256_22, %47 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %48 = arith.cmpi ule, %43, %c4294967295_i256_22 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %48 {
// CHECK-NEXT:       llvm.store %43, %47 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %49 = llvm.load %47 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %50 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc63)
// CHECK-NEXT:     %c4294967295_i256_24 = arith.constant 4294967295 : i256 loc(#loc63)
// CHECK-NEXT:     %c1_i64_25 = arith.constant 1 : i64 loc(#loc63)
// CHECK-NEXT:     %51 = llvm.alloca %c1_i64_25 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     llvm.store %c4294967295_i256_24, %51 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %52 = arith.cmpi ule, %50, %c4294967295_i256_24 : i256 loc(#loc63)
// CHECK-NEXT:     scf.if %52 {
// CHECK-NEXT:       llvm.store %50, %51 : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     %53 = llvm.load %51 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc63)
// CHECK-NEXT:     %c64_i256_26 = arith.constant 64 : i256 loc(#loc63)
// CHECK-NEXT:     %54 = arith.shli %46, %c64_i256_26 : i256 loc(#loc63)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc63)
// CHECK-NEXT:     %55 = arith.shli %49, %c96_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc63)
// CHECK-NEXT:     %56 = arith.shli %53, %c192_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %57 = arith.addi %54, %55 : i256 loc(#loc63)
// CHECK-NEXT:     %58 = arith.addi %57, %56 : i256 loc(#loc63)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc63)
// CHECK-NEXT:     %59 = arith.addi %58, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc63)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc63)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc63)
// CHECK-NEXT:     %60 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %61 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %62 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %63 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %64 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %65 = llvm.mlir.undef : i256 loc(#loc63)
// CHECK-NEXT:     %66:2 = call @__farcall(%59, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %35, %36, %60, %61, %62, %63, %64, %65) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc63)
// CHECK-NEXT:     %false_27 = arith.constant false loc(#loc63)
// CHECK-NEXT:     %67 = arith.cmpi eq, %66#1, %false_27 : i1 loc(#loc63)
// CHECK-NEXT:     scf.if %67 {
// CHECK-NEXT:       %c0_i256_28 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:       %c0_i256_29 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:       %c0_i256_30 = arith.constant 0 : i256 loc(#loc63)
// CHECK-NEXT:       func.call @__revert(%c0_i256_28, %c0_i256_29, %c0_i256_30) : (i256, i256, i256) -> () loc(#loc63)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc63)
// CHECK-NEXT:     } loc(#loc63)
// CHECK-NEXT:     return loc(#loc46)
// CHECK-NEXT:   } loc(#loc46)
// CHECK-NEXT:   func.func @_mint_302(%arg0: i256 loc({{.*}}:105:17), %arg1: i256 loc({{.*}}:105:34)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc35)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc36)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc36)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %2 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc37)
// CHECK-NEXT:     %c2_i256_1 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %3 = llvm.inttoptr %c2_i256_1 : i256 to !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     %4 = llvm.load %3 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc38)
// CHECK-NEXT:     %5 = arith.addi %4, %2 : i256 loc(#loc38)
// CHECK-NEXT:     %6 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     llvm.store %5, %6 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc38)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc39)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc40)
// CHECK-NEXT:     %8 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %7, %8 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc40)
// CHECK-NEXT:     %9 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %c0_i256, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc40)
// CHECK-NEXT:     %10 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %11 = call @__sha3(%10, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc40)
// CHECK-NEXT:     %12 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc41)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %13 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc39)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc40)
// CHECK-NEXT:     %14 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %13, %14 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc40)
// CHECK-NEXT:     %15 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     llvm.store %c0_i256_3, %15 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc40)
// CHECK-NEXT:     %16 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc40)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %17 = call @__sha3(%16, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc40)
// CHECK-NEXT:     %18 = llvm.inttoptr %17 : i256 to !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc40)
// CHECK-NEXT:     %20 = arith.addi %19, %12 : i256 loc(#loc40)
// CHECK-NEXT:     %21 = llvm.inttoptr %11 : i256 to !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     llvm.store %20, %21 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc40)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc42)
// CHECK-NEXT:     %22 = arith.extui %c0_i8 : i8 to i256 loc(#loc42)
// CHECK-NEXT:     %23 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc43)
// CHECK-NEXT:     %24 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc44)
// CHECK-NEXT:     %c64_i256_8 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %25 = llvm.inttoptr %c64_i256_8 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %26 = llvm.load %25 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc45)
// CHECK-NEXT:     %c32_i256_9 = arith.constant 32 : i256 loc(#loc45)
// CHECK-NEXT:     %27 = arith.addi %26, %c32_i256_9 : i256 loc(#loc45)
// CHECK-NEXT:     %c0_i256_10 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:     %28 = arith.addi %26, %c0_i256_10 : i256 loc(#loc45)
// CHECK-NEXT:     %29 = llvm.inttoptr %28 : i256 to !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     llvm.store %24, %29 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc45)
// CHECK-NEXT:     %30 = arith.subi %27, %26 : i256 loc(#loc45)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %31 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %32 = arith.cmpi ule, %26, %c4294967295_i256 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %32 {
// CHECK-NEXT:       llvm.store %26, %31 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %33 = llvm.load %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_11 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_12 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %34 = llvm.alloca %c1_i64_12 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_11, %34 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %35 = arith.cmpi ule, %30, %c4294967295_i256_11 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %35 {
// CHECK-NEXT:       llvm.store %30, %34 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %36 = llvm.load %34 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %37 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc45)
// CHECK-NEXT:     %c4294967295_i256_13 = arith.constant 4294967295 : i256 loc(#loc45)
// CHECK-NEXT:     %c1_i64_14 = arith.constant 1 : i64 loc(#loc45)
// CHECK-NEXT:     %38 = llvm.alloca %c1_i64_14 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     llvm.store %c4294967295_i256_13, %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %39 = arith.cmpi ule, %37, %c4294967295_i256_13 : i256 loc(#loc45)
// CHECK-NEXT:     scf.if %39 {
// CHECK-NEXT:       llvm.store %37, %38 : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     %40 = llvm.load %38 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc45)
// CHECK-NEXT:     %c64_i256_15 = arith.constant 64 : i256 loc(#loc45)
// CHECK-NEXT:     %41 = arith.shli %33, %c64_i256_15 : i256 loc(#loc45)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc45)
// CHECK-NEXT:     %42 = arith.shli %36, %c96_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc45)
// CHECK-NEXT:     %43 = arith.shli %40, %c192_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %44 = arith.addi %41, %42 : i256 loc(#loc45)
// CHECK-NEXT:     %45 = arith.addi %44, %43 : i256 loc(#loc45)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc45)
// CHECK-NEXT:     %46 = arith.addi %45, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc45)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc45)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc45)
// CHECK-NEXT:     %47 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %48 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc45)
// CHECK-NEXT:     %53:2 = call @__farcall(%46, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %22, %23, %47, %48, %49, %50, %51, %52) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc45)
// CHECK-NEXT:     %false_16 = arith.constant false loc(#loc45)
// CHECK-NEXT:     %54 = arith.cmpi eq, %53#1, %false_16 : i1 loc(#loc45)
// CHECK-NEXT:     scf.if %54 {
// CHECK-NEXT:       %c0_i256_17 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_18 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc45)
// CHECK-NEXT:       func.call @__revert(%c0_i256_17, %c0_i256_18, %c0_i256_19) : (i256, i256, i256) -> () loc(#loc45)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc45)
// CHECK-NEXT:     } loc(#loc45)
// CHECK-NEXT:     return loc(#loc34)
// CHECK-NEXT:   } loc(#loc34)
// CHECK-NEXT:   func.func @_burn_338(%arg0: i256 loc({{.*}}:117:17), %arg1: i256 loc({{.*}}:117:34)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc17)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc18)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc19)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c0_i256_2 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc22)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     llvm.store %c0_i256, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc22)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256_2 : i256 to !llvm.ptr<1> loc(#loc22)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc22)
// CHECK-NEXT:     %8 = llvm.inttoptr %7 : i256 to !llvm.ptr<5> loc(#loc22)
// CHECK-NEXT:     %9 = llvm.load %8 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc22)
// CHECK-NEXT:     llvm.store %9, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc19)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc20)
// CHECK-NEXT:     %10 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc23)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc24)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     llvm.store %10, %11 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %c32_i256_5 = arith.constant 32 : i256 loc(#loc24)
// CHECK-NEXT:     %12 = llvm.inttoptr %c32_i256_5 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     llvm.store %c0_i256_3, %12 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %c64_i256_6 = arith.constant 64 : i256 loc(#loc24)
// CHECK-NEXT:     %13 = llvm.inttoptr %c0_i256_4 : i256 to !llvm.ptr<1> loc(#loc24)
// CHECK-NEXT:     %false_7 = arith.constant false loc(#loc)
// CHECK-NEXT:     %14 = call @__sha3(%13, %c64_i256_6, %false_7) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc24)
// CHECK-NEXT:     %15 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc25)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc26)
// CHECK-NEXT:     %17 = arith.subi %15, %16 : i256 loc(#loc25)
// CHECK-NEXT:     %18 = llvm.inttoptr %14 : i256 to !llvm.ptr<5> loc(#loc24)
// CHECK-NEXT:     llvm.store %17, %18 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc24)
// CHECK-NEXT:     %c2_i256 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %19 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %c2_i256_8 = arith.constant 2 : i256 loc(#loc27)
// CHECK-NEXT:     %20 = llvm.inttoptr %c2_i256_8 : i256 to !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     %21 = llvm.load %20 {alignment = 1 : i64} : !llvm.ptr<5> -> i256 loc(#loc29)
// CHECK-NEXT:     %22 = arith.subi %21, %19 : i256 loc(#loc29)
// CHECK-NEXT:     %23 = llvm.inttoptr %c2_i256 : i256 to !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     llvm.store %22, %23 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc29)
// CHECK-NEXT:     %24 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc30)
// CHECK-NEXT:     %c0_i8 = arith.constant 0 : i8 loc(#loc31)
// CHECK-NEXT:     %25 = arith.extui %c0_i8 : i8 to i256 loc(#loc31)
// CHECK-NEXT:     %26 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc32)
// CHECK-NEXT:     %c64_i256_9 = arith.constant 64 : i256 loc(#loc33)
// CHECK-NEXT:     %27 = llvm.inttoptr %c64_i256_9 : i256 to !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     %28 = llvm.load %27 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc33)
// CHECK-NEXT:     %c32_i256_10 = arith.constant 32 : i256 loc(#loc33)
// CHECK-NEXT:     %29 = arith.addi %28, %c32_i256_10 : i256 loc(#loc33)
// CHECK-NEXT:     %c0_i256_11 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:     %30 = arith.addi %28, %c0_i256_11 : i256 loc(#loc33)
// CHECK-NEXT:     %31 = llvm.inttoptr %30 : i256 to !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     llvm.store %26, %31 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc33)
// CHECK-NEXT:     %32 = arith.subi %29, %28 : i256 loc(#loc33)
// CHECK-NEXT:     %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256 = arith.constant 51735811207051471423543085523402233001646248530043601449996937859018943444521 : i256 loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %33 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %33 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %34 = arith.cmpi ule, %28, %c4294967295_i256 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %34 {
// CHECK-NEXT:       llvm.store %28, %33 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %35 = llvm.load %33 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256_12 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64_13 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %36 = llvm.alloca %c1_i64_13 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256_12, %36 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %37 = arith.cmpi ule, %32, %c4294967295_i256_12 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %37 {
// CHECK-NEXT:       llvm.store %32, %36 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %38 = llvm.load %36 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %39 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc33)
// CHECK-NEXT:     %c4294967295_i256_14 = arith.constant 4294967295 : i256 loc(#loc33)
// CHECK-NEXT:     %c1_i64_15 = arith.constant 1 : i64 loc(#loc33)
// CHECK-NEXT:     %40 = llvm.alloca %c1_i64_15 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     llvm.store %c4294967295_i256_14, %40 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %41 = arith.cmpi ule, %39, %c4294967295_i256_14 : i256 loc(#loc33)
// CHECK-NEXT:     scf.if %41 {
// CHECK-NEXT:       llvm.store %39, %40 : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     %42 = llvm.load %40 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc33)
// CHECK-NEXT:     %c64_i256_16 = arith.constant 64 : i256 loc(#loc33)
// CHECK-NEXT:     %43 = arith.shli %35, %c64_i256_16 : i256 loc(#loc33)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc33)
// CHECK-NEXT:     %44 = arith.shli %38, %c96_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc33)
// CHECK-NEXT:     %45 = arith.shli %42, %c192_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %46 = arith.addi %43, %44 : i256 loc(#loc33)
// CHECK-NEXT:     %47 = arith.addi %46, %45 : i256 loc(#loc33)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc33)
// CHECK-NEXT:     %48 = arith.addi %47, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc33)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc33)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc33)
// CHECK-NEXT:     %49 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %50 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %51 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %52 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %53 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %54 = llvm.mlir.undef : i256 loc(#loc33)
// CHECK-NEXT:     %55:2 = call @__farcall(%48, %c32781_i256, %c3_i256, %c51735811207051471423543085523402233001646248530043601449996937859018943444521_i256, %24, %25, %49, %50, %51, %52, %53, %54) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc33)
// CHECK-NEXT:     %false_17 = arith.constant false loc(#loc33)
// CHECK-NEXT:     %56 = arith.cmpi eq, %55#1, %false_17 : i1 loc(#loc33)
// CHECK-NEXT:     scf.if %56 {
// CHECK-NEXT:       %c0_i256_18 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:       %c0_i256_19 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:       %c0_i256_20 = arith.constant 0 : i256 loc(#loc33)
// CHECK-NEXT:       func.call @__revert(%c0_i256_18, %c0_i256_19, %c0_i256_20) : (i256, i256, i256) -> () loc(#loc33)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc33)
// CHECK-NEXT:     } loc(#loc33)
// CHECK-NEXT:     return loc(#loc16)
// CHECK-NEXT:   } loc(#loc16)
// CHECK-NEXT:   func.func @_approve_362(%arg0: i256 loc({{.*}}:132:20), %arg1: i256 loc({{.*}}:132:35), %arg2: i256 loc({{.*}}:132:52)) attributes {llvm.linkage = #llvm.linkage<private>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality, runtime, state_mutability = #sol<StateMutability NonPayable>} {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc4)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     llvm.store %arg0, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc4)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %1 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     llvm.store %arg1, %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %c1_i256_1 = arith.constant 1 : i256 loc(#loc6)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     llvm.store %arg2, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc7)
// CHECK-NEXT:     %3 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc8)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %4 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %3, %4 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:     %5 = llvm.inttoptr %c32_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %c1_i256_2, %5 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:     %6 = llvm.inttoptr %c0_i256 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %false = arith.constant false loc(#loc)
// CHECK-NEXT:     %7 = call @__sha3(%6, %c64_i256, %false) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc9)
// CHECK-NEXT:     %8 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc9)
// CHECK-NEXT:     %9 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %8, %9 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c32_i256_4 = arith.constant 32 : i256 loc(#loc9)
// CHECK-NEXT:     %10 = llvm.inttoptr %c32_i256_4 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     llvm.store %7, %10 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %c64_i256_5 = arith.constant 64 : i256 loc(#loc9)
// CHECK-NEXT:     %11 = llvm.inttoptr %c0_i256_3 : i256 to !llvm.ptr<1> loc(#loc9)
// CHECK-NEXT:     %false_6 = arith.constant false loc(#loc)
// CHECK-NEXT:     %12 = call @__sha3(%11, %c64_i256_5, %false_6) : (!llvm.ptr<1>, i256, i1) -> i256 loc(#loc9)
// CHECK-NEXT:     %13 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc11)
// CHECK-NEXT:     %14 = llvm.inttoptr %12 : i256 to !llvm.ptr<5> loc(#loc9)
// CHECK-NEXT:     llvm.store %13, %14 {alignment = 1 : i64} : i256, !llvm.ptr<5> loc(#loc9)
// CHECK-NEXT:     %15 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc12)
// CHECK-NEXT:     %16 = llvm.load %1 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc13)
// CHECK-NEXT:     %17 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc14)
// CHECK-NEXT:     %c64_i256_7 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %18 = llvm.inttoptr %c64_i256_7 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %19 = llvm.load %18 {alignment = 1 : i64} : !llvm.ptr<1> -> i256 loc(#loc15)
// CHECK-NEXT:     %c32_i256_8 = arith.constant 32 : i256 loc(#loc15)
// CHECK-NEXT:     %20 = arith.addi %19, %c32_i256_8 : i256 loc(#loc15)
// CHECK-NEXT:     %c0_i256_9 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:     %21 = arith.addi %19, %c0_i256_9 : i256 loc(#loc15)
// CHECK-NEXT:     %22 = llvm.inttoptr %21 : i256 to !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     llvm.store %17, %22 {alignment = 1 : i64} : i256, !llvm.ptr<1> loc(#loc15)
// CHECK-NEXT:     %23 = arith.subi %20, %19 : i256 loc(#loc15)
// CHECK-NEXT:     %c50857715716685556425904105453071271481286891662805453476519619806107580839465_i256 = arith.constant 50857715716685556425904105453071271481286891662805453476519619806107580839465 : i256 loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %24 = llvm.alloca %c1_i64 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256, %24 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %25 = arith.cmpi ule, %19, %c4294967295_i256 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %25 {
// CHECK-NEXT:       llvm.store %19, %24 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %26 = llvm.load %24 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256_10 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64_11 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %27 = llvm.alloca %c1_i64_11 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256_10, %27 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %28 = arith.cmpi ule, %23, %c4294967295_i256_10 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %28 {
// CHECK-NEXT:       llvm.store %23, %27 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %29 = llvm.load %27 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %30 = "llvm.intrcall"() <{id = 3176 : i32, name = "eravm.gasleft"}> : () -> i256 loc(#loc15)
// CHECK-NEXT:     %c4294967295_i256_12 = arith.constant 4294967295 : i256 loc(#loc15)
// CHECK-NEXT:     %c1_i64_13 = arith.constant 1 : i64 loc(#loc15)
// CHECK-NEXT:     %31 = llvm.alloca %c1_i64_13 x i256 {alignment = 32 : i64} : (i64) -> !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     llvm.store %c4294967295_i256_12, %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %32 = arith.cmpi ule, %30, %c4294967295_i256_12 : i256 loc(#loc15)
// CHECK-NEXT:     scf.if %32 {
// CHECK-NEXT:       llvm.store %30, %31 : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     %33 = llvm.load %31 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc15)
// CHECK-NEXT:     %c64_i256_14 = arith.constant 64 : i256 loc(#loc15)
// CHECK-NEXT:     %34 = arith.shli %26, %c64_i256_14 : i256 loc(#loc15)
// CHECK-NEXT:     %c96_i256 = arith.constant 96 : i256 loc(#loc15)
// CHECK-NEXT:     %35 = arith.shli %29, %c96_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %c192_i256 = arith.constant 192 : i256 loc(#loc15)
// CHECK-NEXT:     %36 = arith.shli %33, %c192_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %37 = arith.addi %34, %35 : i256 loc(#loc15)
// CHECK-NEXT:     %38 = arith.addi %37, %36 : i256 loc(#loc15)
// CHECK-NEXT:     %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 = arith.constant 904625697166532776746648320380374280103671755200316906558262375061821325312 : i256 loc(#loc15)
// CHECK-NEXT:     %39 = arith.addi %38, %c904625697166532776746648320380374280103671755200316906558262375061821325312_i256 : i256 loc(#loc15)
// CHECK-NEXT:     %c32781_i256 = arith.constant 32781 : i256 loc(#loc15)
// CHECK-NEXT:     %c3_i256 = arith.constant 3 : i256 loc(#loc15)
// CHECK-NEXT:     %40 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %41 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %42 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %43 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %44 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %45 = llvm.mlir.undef : i256 loc(#loc15)
// CHECK-NEXT:     %46:2 = call @__farcall(%39, %c32781_i256, %c3_i256, %c50857715716685556425904105453071271481286891662805453476519619806107580839465_i256, %15, %16, %40, %41, %42, %43, %44, %45) : (i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256) -> (!llvm.ptr<3>, i1) loc(#loc15)
// CHECK-NEXT:     %false_15 = arith.constant false loc(#loc15)
// CHECK-NEXT:     %47 = arith.cmpi eq, %46#1, %false_15 : i1 loc(#loc15)
// CHECK-NEXT:     scf.if %47 {
// CHECK-NEXT:       %c0_i256_16 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:       %c0_i256_17 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:       %c0_i256_18 = arith.constant 0 : i256 loc(#loc15)
// CHECK-NEXT:       func.call @__revert(%c0_i256_16, %c0_i256_17, %c0_i256_18) : (i256, i256, i256) -> () loc(#loc15)
// CHECK-NEXT:       func.call @".unreachable"() : () -> () loc(#loc15)
// CHECK-NEXT:     } loc(#loc15)
// CHECK-NEXT:     return loc(#loc3)
// CHECK-NEXT:   } loc(#loc3)
// CHECK-NEXT:   func.func private @__personality() -> i32 attributes {llvm.linkage = #llvm.linkage<external>, passthrough = ["nofree", "null_pointer_is_valid"], personality = @__personality} loc(#loc)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:132:2)
// CHECK-NEXT: #loc7 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc8 = loc({{.*}}:137:16)
// CHECK-NEXT: #loc9 = loc({{.*}}:137:4)
// CHECK-NEXT: #loc10 = loc({{.*}}:137:23)
// CHECK-NEXT: #loc11 = loc({{.*}}:137:34)
// CHECK-NEXT: #loc12 = loc({{.*}}:138:18)
// CHECK-NEXT: #loc13 = loc({{.*}}:138:25)
// CHECK-NEXT: #loc14 = loc({{.*}}:138:34)
// CHECK-NEXT: #loc15 = loc({{.*}}:138:9)
// CHECK-NEXT: #loc16 = loc({{.*}}:117:2)
// CHECK-NEXT: #loc19 = loc({{.*}}:121:4)
// CHECK-NEXT: #loc20 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc21 = loc({{.*}}:121:39)
// CHECK-NEXT: #loc22 = loc({{.*}}:121:29)
// CHECK-NEXT: #loc23 = loc({{.*}}:125:16)
// CHECK-NEXT: #loc24 = loc({{.*}}:125:6)
// CHECK-NEXT: #loc25 = loc({{.*}}:125:27)
// CHECK-NEXT: #loc26 = loc({{.*}}:125:44)
// CHECK-NEXT: #loc27 = loc({{.*}}:9:2)
// CHECK-NEXT: #loc28 = loc({{.*}}:126:22)
// CHECK-NEXT: #loc29 = loc({{.*}}:126:6)
// CHECK-NEXT: #loc30 = loc({{.*}}:129:18)
// CHECK-NEXT: #loc31 = loc({{.*}}:129:35)
// CHECK-NEXT: #loc32 = loc({{.*}}:129:39)
// CHECK-NEXT: #loc33 = loc({{.*}}:129:9)
// CHECK-NEXT: #loc34 = loc({{.*}}:105:2)
// CHECK-NEXT: #loc37 = loc({{.*}}:111:22)
// CHECK-NEXT: #loc38 = loc({{.*}}:111:6)
// CHECK-NEXT: #loc39 = loc({{.*}}:112:16)
// CHECK-NEXT: #loc40 = loc({{.*}}:112:6)
// CHECK-NEXT: #loc41 = loc({{.*}}:112:28)
// CHECK-NEXT: #loc42 = loc({{.*}}:114:26)
// CHECK-NEXT: #loc43 = loc({{.*}}:114:30)
// CHECK-NEXT: #loc44 = loc({{.*}}:114:39)
// CHECK-NEXT: #loc45 = loc({{.*}}:114:9)
// CHECK-NEXT: #loc46 = loc({{.*}}:89:2)
// CHECK-NEXT: #loc50 = loc({{.*}}:94:4)
// CHECK-NEXT: #loc51 = loc({{.*}}:94:38)
// CHECK-NEXT: #loc52 = loc({{.*}}:94:28)
// CHECK-NEXT: #loc53 = loc({{.*}}:98:16)
// CHECK-NEXT: #loc54 = loc({{.*}}:98:6)
// CHECK-NEXT: #loc55 = loc({{.*}}:98:26)
// CHECK-NEXT: #loc56 = loc({{.*}}:98:42)
// CHECK-NEXT: #loc57 = loc({{.*}}:100:16)
// CHECK-NEXT: #loc58 = loc({{.*}}:100:6)
// CHECK-NEXT: #loc59 = loc({{.*}}:100:30)
// CHECK-NEXT: #loc60 = loc({{.*}}:102:18)
// CHECK-NEXT: #loc61 = loc({{.*}}:102:26)
// CHECK-NEXT: #loc62 = loc({{.*}}:102:37)
// CHECK-NEXT: #loc63 = loc({{.*}}:102:9)
// CHECK-NEXT: #loc64 = loc({{.*}}:77:2)
// CHECK-NEXT: #loc67 = loc({{.*}}:79:4)
// CHECK-NEXT: #loc68 = loc({{.*}}:79:43)
// CHECK-NEXT: #loc69 = loc({{.*}}:79:31)
// CHECK-NEXT: #loc70 = loc({{.*}}:79:57)
// CHECK-NEXT: #loc71 = loc({{.*}}:83:15)
// CHECK-NEXT: #loc72 = loc({{.*}}:83:29)
// CHECK-NEXT: #loc73 = loc({{.*}}:83:38)
// CHECK-NEXT: #loc74 = loc({{.*}}:83:57)
// CHECK-NEXT: #loc75 = loc({{.*}}:83:6)
// CHECK-NEXT: #loc76 = loc({{.*}}:86:11)
// CHECK-NEXT: #loc77 = loc({{.*}}:86:4)
// CHECK-NEXT: #loc78 = loc({{.*}}:68:2)
// CHECK-NEXT: #loc81 = loc({{.*}}:72:13)
// CHECK-NEXT: #loc82 = loc({{.*}}:72:27)
// CHECK-NEXT: #loc83 = loc({{.*}}:72:48)
// CHECK-NEXT: #loc84 = loc({{.*}}:72:36)
// CHECK-NEXT: #loc85 = loc({{.*}}:72:62)
// CHECK-NEXT: #loc86 = loc({{.*}}:72:73)
// CHECK-NEXT: #loc87 = loc({{.*}}:72:4)
// CHECK-NEXT: #loc88 = loc({{.*}}:74:11)
// CHECK-NEXT: #loc89 = loc({{.*}}:74:4)
// CHECK-NEXT: #loc90 = loc({{.*}}:54:2)
// CHECK-NEXT: #loc94 = loc({{.*}}:56:14)
// CHECK-NEXT: #loc95 = loc({{.*}}:56:22)
// CHECK-NEXT: #loc96 = loc({{.*}}:56:33)
// CHECK-NEXT: #loc97 = loc({{.*}}:56:4)
// CHECK-NEXT: #loc98 = loc({{.*}}:58:4)
// CHECK-NEXT: #loc99 = loc({{.*}}:58:43)
// CHECK-NEXT: #loc100 = loc({{.*}}:58:31)
// CHECK-NEXT: #loc101 = loc({{.*}}:58:51)
// CHECK-NEXT: #loc102 = loc({{.*}}:62:15)
// CHECK-NEXT: #loc103 = loc({{.*}}:62:23)
// CHECK-NEXT: #loc104 = loc({{.*}}:62:37)
// CHECK-NEXT: #loc105 = loc({{.*}}:62:56)
// CHECK-NEXT: #loc106 = loc({{.*}}:62:6)
// CHECK-NEXT: #loc107 = loc({{.*}}:65:11)
// CHECK-NEXT: #loc108 = loc({{.*}}:65:4)
// CHECK-NEXT: #loc109 = loc({{.*}}:49:2)
// CHECK-NEXT: #loc112 = loc({{.*}}:50:13)
// CHECK-NEXT: #loc113 = loc({{.*}}:50:27)
// CHECK-NEXT: #loc114 = loc({{.*}}:50:36)
// CHECK-NEXT: #loc115 = loc({{.*}}:50:4)
// CHECK-NEXT: #loc116 = loc({{.*}}:51:11)
// CHECK-NEXT: #loc117 = loc({{.*}}:51:4)
// CHECK-NEXT: #loc118 = loc({{.*}}:45:2)
// CHECK-NEXT: #loc121 = loc({{.*}}:46:23)
// CHECK-NEXT: #loc122 = loc({{.*}}:46:11)
// CHECK-NEXT: #loc123 = loc({{.*}}:46:30)
// CHECK-NEXT: #loc124 = loc({{.*}}:46:4)
// CHECK-NEXT: #loc125 = loc({{.*}}:40:2)
// CHECK-NEXT: #loc128 = loc({{.*}}:41:14)
// CHECK-NEXT: #loc129 = loc({{.*}}:41:28)
// CHECK-NEXT: #loc130 = loc({{.*}}:41:39)
// CHECK-NEXT: #loc131 = loc({{.*}}:41:4)
// CHECK-NEXT: #loc132 = loc({{.*}}:42:11)
// CHECK-NEXT: #loc133 = loc({{.*}}:42:4)
// CHECK-NEXT: #loc134 = loc({{.*}}:36:2)
// CHECK-NEXT: #loc136 = loc({{.*}}:37:21)
// CHECK-NEXT: #loc137 = loc({{.*}}:37:11)
// CHECK-NEXT: #loc138 = loc({{.*}}:37:4)
// CHECK-NEXT: #loc139 = loc({{.*}}:32:2)
// CHECK-NEXT: #loc140 = loc({{.*}}:33:11)
// CHECK-NEXT: #loc141 = loc({{.*}}:33:4)
// CHECK-NEXT: #loc142 = loc({{.*}}:28:2)
// CHECK-NEXT: #loc143 = loc({{.*}}:29:11)
// CHECK-NEXT: #loc144 = loc({{.*}}:29:4)
// CHECK-NEXT: #loc145 = loc({{.*}}:24:2)
// CHECK-NEXT: #loc146 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc147 = loc({{.*}}:25:4)
// CHECK-NEXT: #loc148 = loc({{.*}}:20:2)
// CHECK-NEXT: #loc149 = loc({{.*}}:21:4)
// CHECK-NEXT: #loc150 = loc({{.*}}:16:2)
// CHECK-NEXT: #loc151 = loc({{.*}}:17:11)
// CHECK-NEXT: #loc152 = loc({{.*}}:17:4)
// CHECK-EMPTY:
