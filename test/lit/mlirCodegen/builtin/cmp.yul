// RUN: solc --yul --yul-dialect=evm --mlir-action=print-init --mmlir --mlir-print-debuginfo --mlir-target=eravm %s | FileCheck %s

object "Test" {
  code {
    let a := mload(32)
    let b := mload(64)
    if lt(a, b) {
      mstore(0, 0)
    }
    mstore(0, lt(a, b))
    if iszero(a) {
      mstore(1, 0)
    }
    mstore(1, iszero(a))
    return(0, 0)
  }
  object "Test_deployed" {
    code {
      let a := mload(32)
      let b := mload(64)
      if lt(a, b) {
        mstore(0, 0)
      }
      mstore(0, lt(a, b))
      if iszero(a) {
        mstore(1, 0)
      }
      mstore(1, iszero(a))
      return(0, 0)
    }
  }
}
// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: module {
// CHECK-NEXT:   sol.object @Test {
// CHECK-NEXT:     %c1_i256 = arith.constant 1 : i256 loc(#loc1)
// CHECK-NEXT:     %0 = llvm.alloca %c1_i256 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc2)
// CHECK-NEXT:     %c32_i256 = arith.constant 32 : i256 loc(#loc3)
// CHECK-NEXT:     %1 = sol.mload %c32_i256 loc(#loc4)
// CHECK-NEXT:     llvm.store %1, %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc1)
// CHECK-NEXT:     %c1_i256_0 = arith.constant 1 : i256 loc(#loc5)
// CHECK-NEXT:     %2 = llvm.alloca %c1_i256_0 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc6)
// CHECK-NEXT:     %c64_i256 = arith.constant 64 : i256 loc(#loc7)
// CHECK-NEXT:     %3 = sol.mload %c64_i256 loc(#loc8)
// CHECK-NEXT:     llvm.store %3, %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc5)
// CHECK-NEXT:     %4 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc9)
// CHECK-NEXT:     %5 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc10)
// CHECK-NEXT:     %6 = arith.cmpi ult, %4, %5 : i256 loc(#loc11)
// CHECK-NEXT:     scf.if %6 {
// CHECK-NEXT:       %c0_i256_6 = arith.constant 0 : i256 loc(#loc13)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc14)
// CHECK-NEXT:       sol.mstore %c0_i256_6, %c0_i256_7 loc(#loc15)
// CHECK-NEXT:     } loc(#loc12)
// CHECK-NEXT:     %c0_i256 = arith.constant 0 : i256 loc(#loc16)
// CHECK-NEXT:     %7 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc17)
// CHECK-NEXT:     %8 = llvm.load %2 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc18)
// CHECK-NEXT:     %9 = arith.cmpi ult, %7, %8 : i256 loc(#loc19)
// CHECK-NEXT:     %10 = arith.extui %9 : i1 to i256 loc(#loc19)
// CHECK-NEXT:     sol.mstore %c0_i256, %10 loc(#loc20)
// CHECK-NEXT:     %11 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc21)
// CHECK-NEXT:     %c0_i256_1 = arith.constant 0 : i256 loc(#loc22)
// CHECK-NEXT:     %12 = arith.cmpi eq, %11, %c0_i256_1 : i256 loc(#loc22)
// CHECK-NEXT:     scf.if %12 {
// CHECK-NEXT:       %c1_i256_6 = arith.constant 1 : i256 loc(#loc24)
// CHECK-NEXT:       %c0_i256_7 = arith.constant 0 : i256 loc(#loc25)
// CHECK-NEXT:       sol.mstore %c1_i256_6, %c0_i256_7 loc(#loc26)
// CHECK-NEXT:     } loc(#loc23)
// CHECK-NEXT:     %c1_i256_2 = arith.constant 1 : i256 loc(#loc27)
// CHECK-NEXT:     %13 = llvm.load %0 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc28)
// CHECK-NEXT:     %c0_i256_3 = arith.constant 0 : i256 loc(#loc29)
// CHECK-NEXT:     %14 = arith.cmpi eq, %13, %c0_i256_3 : i256 loc(#loc29)
// CHECK-NEXT:     %15 = arith.extui %14 : i1 to i256 loc(#loc29)
// CHECK-NEXT:     sol.mstore %c1_i256_2, %15 loc(#loc30)
// CHECK-NEXT:     %c0_i256_4 = arith.constant 0 : i256 loc(#loc31)
// CHECK-NEXT:     %c0_i256_5 = arith.constant 0 : i256 loc(#loc32)
// CHECK-NEXT:     sol.return %c0_i256_4, %c0_i256_5 loc(#loc33)
// CHECK-NEXT:     sol.object @Test_deployed {
// CHECK-NEXT:       %c1_i256_6 = arith.constant 1 : i256 loc(#loc34)
// CHECK-NEXT:       %16 = llvm.alloca %c1_i256_6 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc35)
// CHECK-NEXT:       %c32_i256_7 = arith.constant 32 : i256 loc(#loc36)
// CHECK-NEXT:       %17 = sol.mload %c32_i256_7 loc(#loc37)
// CHECK-NEXT:       llvm.store %17, %16 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc34)
// CHECK-NEXT:       %c1_i256_8 = arith.constant 1 : i256 loc(#loc38)
// CHECK-NEXT:       %18 = llvm.alloca %c1_i256_8 x i256 {alignment = 32 : i64} : (i256) -> !llvm.ptr<i256> loc(#loc39)
// CHECK-NEXT:       %c64_i256_9 = arith.constant 64 : i256 loc(#loc40)
// CHECK-NEXT:       %19 = sol.mload %c64_i256_9 loc(#loc41)
// CHECK-NEXT:       llvm.store %19, %18 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc38)
// CHECK-NEXT:       %20 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc42)
// CHECK-NEXT:       %21 = llvm.load %18 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc43)
// CHECK-NEXT:       %22 = arith.cmpi ult, %20, %21 : i256 loc(#loc44)
// CHECK-NEXT:       scf.if %22 {
// CHECK-NEXT:         %c0_i256_16 = arith.constant 0 : i256 loc(#loc46)
// CHECK-NEXT:         %c0_i256_17 = arith.constant 0 : i256 loc(#loc47)
// CHECK-NEXT:         sol.mstore %c0_i256_16, %c0_i256_17 loc(#loc48)
// CHECK-NEXT:       } loc(#loc45)
// CHECK-NEXT:       %c0_i256_10 = arith.constant 0 : i256 loc(#loc49)
// CHECK-NEXT:       %23 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc50)
// CHECK-NEXT:       %24 = llvm.load %18 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc51)
// CHECK-NEXT:       %25 = arith.cmpi ult, %23, %24 : i256 loc(#loc52)
// CHECK-NEXT:       %26 = arith.extui %25 : i1 to i256 loc(#loc52)
// CHECK-NEXT:       sol.mstore %c0_i256_10, %26 loc(#loc53)
// CHECK-NEXT:       %27 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc54)
// CHECK-NEXT:       %c0_i256_11 = arith.constant 0 : i256 loc(#loc55)
// CHECK-NEXT:       %28 = arith.cmpi eq, %27, %c0_i256_11 : i256 loc(#loc55)
// CHECK-NEXT:       scf.if %28 {
// CHECK-NEXT:         %c1_i256_16 = arith.constant 1 : i256 loc(#loc57)
// CHECK-NEXT:         %c0_i256_17 = arith.constant 0 : i256 loc(#loc58)
// CHECK-NEXT:         sol.mstore %c1_i256_16, %c0_i256_17 loc(#loc59)
// CHECK-NEXT:       } loc(#loc56)
// CHECK-NEXT:       %c1_i256_12 = arith.constant 1 : i256 loc(#loc60)
// CHECK-NEXT:       %29 = llvm.load %16 {alignment = 32 : i64} : !llvm.ptr<i256> loc(#loc61)
// CHECK-NEXT:       %c0_i256_13 = arith.constant 0 : i256 loc(#loc62)
// CHECK-NEXT:       %30 = arith.cmpi eq, %29, %c0_i256_13 : i256 loc(#loc62)
// CHECK-NEXT:       %31 = arith.extui %30 : i1 to i256 loc(#loc62)
// CHECK-NEXT:       sol.mstore %c1_i256_12, %31 loc(#loc63)
// CHECK-NEXT:       %c0_i256_14 = arith.constant 0 : i256 loc(#loc64)
// CHECK-NEXT:       %c0_i256_15 = arith.constant 0 : i256 loc(#loc65)
// CHECK-NEXT:       sol.return %c0_i256_14, %c0_i256_15 loc(#loc66)
// CHECK-NEXT:     } loc(#loc0)
// CHECK-NEXT:   } loc(#loc0)
// CHECK-NEXT: } loc(#loc0)
// CHECK-NEXT: #loc0 = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:4:4)
// CHECK-NEXT: #loc2 = loc({{.*}}:4:8)
// CHECK-NEXT: #loc3 = loc({{.*}}:4:19)
// CHECK-NEXT: #loc4 = loc({{.*}}:4:13)
// CHECK-NEXT: #loc5 = loc({{.*}}:5:4)
// CHECK-NEXT: #loc6 = loc({{.*}}:5:8)
// CHECK-NEXT: #loc7 = loc({{.*}}:5:19)
// CHECK-NEXT: #loc8 = loc({{.*}}:5:13)
// CHECK-NEXT: #loc9 = loc({{.*}}:6:10)
// CHECK-NEXT: #loc10 = loc({{.*}}:6:13)
// CHECK-NEXT: #loc11 = loc({{.*}}:6:7)
// CHECK-NEXT: #loc12 = loc({{.*}}:6:4)
// CHECK-NEXT: #loc13 = loc({{.*}}:7:13)
// CHECK-NEXT: #loc14 = loc({{.*}}:7:16)
// CHECK-NEXT: #loc15 = loc({{.*}}:7:6)
// CHECK-NEXT: #loc16 = loc({{.*}}:9:11)
// CHECK-NEXT: #loc17 = loc({{.*}}:9:17)
// CHECK-NEXT: #loc18 = loc({{.*}}:9:20)
// CHECK-NEXT: #loc19 = loc({{.*}}:9:14)
// CHECK-NEXT: #loc20 = loc({{.*}}:9:4)
// CHECK-NEXT: #loc21 = loc({{.*}}:10:14)
// CHECK-NEXT: #loc22 = loc({{.*}}:10:7)
// CHECK-NEXT: #loc23 = loc({{.*}}:10:4)
// CHECK-NEXT: #loc24 = loc({{.*}}:11:13)
// CHECK-NEXT: #loc25 = loc({{.*}}:11:16)
// CHECK-NEXT: #loc26 = loc({{.*}}:11:6)
// CHECK-NEXT: #loc27 = loc({{.*}}:13:11)
// CHECK-NEXT: #loc28 = loc({{.*}}:13:21)
// CHECK-NEXT: #loc29 = loc({{.*}}:13:14)
// CHECK-NEXT: #loc30 = loc({{.*}}:13:4)
// CHECK-NEXT: #loc31 = loc({{.*}}:14:11)
// CHECK-NEXT: #loc32 = loc({{.*}}:14:14)
// CHECK-NEXT: #loc33 = loc({{.*}}:14:4)
// CHECK-NEXT: #loc34 = loc({{.*}}:18:6)
// CHECK-NEXT: #loc35 = loc({{.*}}:18:10)
// CHECK-NEXT: #loc36 = loc({{.*}}:18:21)
// CHECK-NEXT: #loc37 = loc({{.*}}:18:15)
// CHECK-NEXT: #loc38 = loc({{.*}}:19:6)
// CHECK-NEXT: #loc39 = loc({{.*}}:19:10)
// CHECK-NEXT: #loc40 = loc({{.*}}:19:21)
// CHECK-NEXT: #loc41 = loc({{.*}}:19:15)
// CHECK-NEXT: #loc42 = loc({{.*}}:20:12)
// CHECK-NEXT: #loc43 = loc({{.*}}:20:15)
// CHECK-NEXT: #loc44 = loc({{.*}}:20:9)
// CHECK-NEXT: #loc45 = loc({{.*}}:20:6)
// CHECK-NEXT: #loc46 = loc({{.*}}:21:15)
// CHECK-NEXT: #loc47 = loc({{.*}}:21:18)
// CHECK-NEXT: #loc48 = loc({{.*}}:21:8)
// CHECK-NEXT: #loc49 = loc({{.*}}:23:13)
// CHECK-NEXT: #loc50 = loc({{.*}}:23:19)
// CHECK-NEXT: #loc51 = loc({{.*}}:23:22)
// CHECK-NEXT: #loc52 = loc({{.*}}:23:16)
// CHECK-NEXT: #loc53 = loc({{.*}}:23:6)
// CHECK-NEXT: #loc54 = loc({{.*}}:24:16)
// CHECK-NEXT: #loc55 = loc({{.*}}:24:9)
// CHECK-NEXT: #loc56 = loc({{.*}}:24:6)
// CHECK-NEXT: #loc57 = loc({{.*}}:25:15)
// CHECK-NEXT: #loc58 = loc({{.*}}:25:18)
// CHECK-NEXT: #loc59 = loc({{.*}}:25:8)
// CHECK-NEXT: #loc60 = loc({{.*}}:27:13)
// CHECK-NEXT: #loc61 = loc({{.*}}:27:23)
// CHECK-NEXT: #loc62 = loc({{.*}}:27:16)
// CHECK-NEXT: #loc63 = loc({{.*}}:27:6)
// CHECK-NEXT: #loc64 = loc({{.*}}:28:13)
// CHECK-NEXT: #loc65 = loc({{.*}}:28:16)
// CHECK-NEXT: #loc66 = loc({{.*}}:28:6)
// CHECK-EMPTY:
