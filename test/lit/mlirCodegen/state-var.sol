// RUN: solc --mlir-action=print-init --mmlir --mlir-print-debuginfo %s | FileCheck %s

// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.0;

contract C {
  uint ui;
  mapping(address => uint) m0;
  mapping(address => mapping(address => uint256)) m1;

  function f_ui() public view returns (uint) { return ui; }
  function f_m0(address a) public view returns (uint) { return m0[a]; }
  function f_m1(address a, address b) public view returns (uint) { return m1[a][b]; }
}

// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: #loc9 = loc({{.*}}:11:16)
// CHECK-NEXT: #loc14 = loc({{.*}}:12:16)
// CHECK-NEXT: #loc15 = loc({{.*}}:12:27)
// CHECK-NEXT: module {
// CHECK-NEXT:   sol.contract @C_50 {
// CHECK-NEXT:     sol.state_var @ui : i256 loc(#loc2)
// CHECK-NEXT:     sol.state_var @m0 : !sol.mapping<i256, i256> loc(#loc3)
// CHECK-NEXT:     sol.state_var @m1 : !sol.mapping<i256, !sol.mapping<i256, i256>> loc(#loc4)
// CHECK-NEXT:     sol.func @f_ui_21() -> i256 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %0 = sol.addr_of @ui : !sol.ptr<i256, Storage> loc(#loc2)
// CHECK-NEXT:       %1 = sol.load %0 : !sol.ptr<i256, Storage>, i256 loc(#loc6)
// CHECK-NEXT:       sol.return %1 : i256 loc(#loc7)
// CHECK-NEXT:     } loc(#loc5)
// CHECK-NEXT:     sol.func @f_m0_33(%arg0: i256 loc({{.*}}:11:16)) -> i256 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<i256, Stack> loc(#loc9)
// CHECK-NEXT:       sol.store %arg0, %0 : i256, !sol.ptr<i256, Stack> loc(#loc9)
// CHECK-NEXT:       %1 = sol.addr_of @m0 : !sol.mapping<i256, i256> loc(#loc3)
// CHECK-NEXT:       %2 = sol.load %0 : !sol.ptr<i256, Stack>, i256 loc(#loc10)
// CHECK-NEXT:       %3 = sol.map %1, %2 : !sol.mapping<i256, i256>, !sol.ptr<i256, Storage> loc(#loc11)
// CHECK-NEXT:       %4 = sol.load %3 : !sol.ptr<i256, Storage>, i256 loc(#loc11)
// CHECK-NEXT:       sol.return %4 : i256 loc(#loc12)
// CHECK-NEXT:     } loc(#loc8)
// CHECK-NEXT:     sol.func @f_m1_49(%arg0: i256 loc({{.*}}:12:16), %arg1: i256 loc({{.*}}:12:27)) -> i256 attributes {state_mutability = #sol<StateMutability View>} {
// CHECK-NEXT:       %0 = sol.alloca : !sol.ptr<i256, Stack> loc(#loc14)
// CHECK-NEXT:       sol.store %arg0, %0 : i256, !sol.ptr<i256, Stack> loc(#loc14)
// CHECK-NEXT:       %1 = sol.alloca : !sol.ptr<i256, Stack> loc(#loc15)
// CHECK-NEXT:       sol.store %arg1, %1 : i256, !sol.ptr<i256, Stack> loc(#loc15)
// CHECK-NEXT:       %2 = sol.addr_of @m1 : !sol.mapping<i256, !sol.mapping<i256, i256>> loc(#loc4)
// CHECK-NEXT:       %3 = sol.load %0 : !sol.ptr<i256, Stack>, i256 loc(#loc16)
// CHECK-NEXT:       %4 = sol.map %2, %3 : !sol.mapping<i256, !sol.mapping<i256, i256>>, !sol.mapping<i256, i256> loc(#loc17)
// CHECK-NEXT:       %5 = sol.load %1 : !sol.ptr<i256, Stack>, i256 loc(#loc18)
// CHECK-NEXT:       %6 = sol.map %4, %5 : !sol.mapping<i256, i256>, !sol.ptr<i256, Storage> loc(#loc17)
// CHECK-NEXT:       %7 = sol.load %6 : !sol.ptr<i256, Storage>, i256 loc(#loc17)
// CHECK-NEXT:       sol.return %7 : i256 loc(#loc19)
// CHECK-NEXT:     } loc(#loc13)
// CHECK-NEXT:   } {interface_fns = [{selector = "c2bf6003", sym = @f_m0_33, type = (i256) -> i256}, {selector = "ea3b4c07", sym = @f_m1_49, type = (i256, i256) -> i256}, {selector = "eb80bd39", sym = @f_ui_21, type = () -> i256}], kind = #sol<ContractKind Contract>} loc(#loc1)
// CHECK-NEXT: } loc(#loc)
// CHECK-NEXT: #loc = loc(unknown)
// CHECK-NEXT: #loc1 = loc({{.*}}:5:0)
// CHECK-NEXT: #loc2 = loc({{.*}}:6:2)
// CHECK-NEXT: #loc3 = loc({{.*}}:7:2)
// CHECK-NEXT: #loc4 = loc({{.*}}:8:2)
// CHECK-NEXT: #loc5 = loc({{.*}}:10:2)
// CHECK-NEXT: #loc6 = loc({{.*}}:10:54)
// CHECK-NEXT: #loc7 = loc({{.*}}:10:47)
// CHECK-NEXT: #loc8 = loc({{.*}}:11:2)
// CHECK-NEXT: #loc10 = loc({{.*}}:11:66)
// CHECK-NEXT: #loc11 = loc({{.*}}:11:63)
// CHECK-NEXT: #loc12 = loc({{.*}}:11:56)
// CHECK-NEXT: #loc13 = loc({{.*}}:12:2)
// CHECK-NEXT: #loc16 = loc({{.*}}:12:77)
// CHECK-NEXT: #loc17 = loc({{.*}}:12:74)
// CHECK-NEXT: #loc18 = loc({{.*}}:12:80)
// CHECK-NEXT: #loc19 = loc({{.*}}:12:67)
// CHECK-EMPTY:
